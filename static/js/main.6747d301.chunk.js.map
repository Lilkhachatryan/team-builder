{"version":3,"sources":["assets/styles/App.stype.js","utils/logger.js","utils/storage.js","plugins/notify.js","plugins/axios.js","utils/endpoints.js","actions/auth.js","components/Header.js","actions/user.js","components/Route.js","pages/Home.js","components/Input.js","pages/Login.js","utils/helpers.js","components/Dropdown.js","components/DatePickerField.js","pages/SignUp.js","actions/topics.js","pages/Topics.js","pages/Profile.js","components/UserForm.js","actions/projects.js","pages/Projects.js","Router.js","App.js","serviceWorker.js","reducers/topics.js","reducers/projects.js","reducers/index.js","reducers/users.js","index.js","store/configureStore.js"],"names":["PageContainer","styled","div","warn","text","console","memoryStorage","getSessionStorage","key","sessionStorage","getItem","e","removeSessionStorage","name","removeItem","error","notifySuccess","message","title","time","cb","NotificationManager","success","notifyError","axios","require","create","baseURL","process","interceptors","request","use","config","accessToken","headers","register","data","post","getCompanies","get","logout","dispatch","then","response","status","Error","statusText","log","catch","err","Header","state","isMobile","isOpen","sources","show","search","attemptLogout","props","res","history","push","Routes","Login","renderNavItems","className","to","Home","activeClassName","Topics","Projects","Profile","onClick","type","style","backgroundColor","this","Component","withRouter","connect","userFetchSuccess","user","getUser","updateUser","payload","put","fetchUser","guard","component","rest","isLoggedIn","Promise","reject","path","Root","Object","keys","length","Input","id","label","htmlFor","radio","checkbox","LOGIN_VALIDATION_SCHEMA","yup","shape","email","required","password","initialValues","validationSchema","onSubmit","values","value","setItem","setSessionStorage","token","placeholder","SignUp","formatDate","date","format","moment","Dropdown","options","as","map","item","i","DatePickerField","setFieldValue","useFormikContext","useField","field","selected","Date","onChange","val","companies","rememberMe","firstName","lastName","birthDate","sex","avatarUrl","jsExperience","reactExperience","companyId","SIGNUP_VALIDATION_SCHEMA","fistName","min","oneOf","onRememberMeChange","setState","attemptSignUp","Number","getCompaniesFromServer","formik","handleSubmit","checked","aria-label","getTopics","topics","addTopic","topic","voteTopic","endpoints","deleteTopic","delete","topicDeleteSuccess","TOPIC_VALIDATION_SCHEMA","attemptAdd","votedByMe","canDelete","USER_VALIDATION_SCHEMA","attemptUpdate","editUser","validateOnMount","getProjects","voteProject","projects","items","join","freeze","NotFoundPage","NotFound","location","pathname","Router","exact","App","Boolean","window","hostname","match","initialState","project","combineReducers","action","store","enhancer","applyMiddleware","thunk","createStore","reducers","configureStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.6747d301.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const PageContainer = styled.div`\r\n    margin-top: 60px;\r\n    padding: 10px 40px;\r\n`;\r\n","/* eslint-disable no-console */\r\nexport const log = text => console.log(text);\r\n\r\nexport const info = text => console.info(text);\r\n\r\nexport const warn = text => console.warn(text);\r\n\r\nexport const error = text => console.error(text);\r\n","import { warn } from './logger';\r\nlet memoryStorage = {};\r\n\r\nexport const setSessionStorage = (key, value) => {\r\n    try {\r\n        memoryStorage[key] = value;\r\n        sessionStorage.setItem(key, value);\r\n    } catch (e) {\r\n        warn(`Error on setting sessionStorage by ${key} key!`);\r\n    }\r\n};\r\n\r\nexport const getSessionStorage = (key) => {\r\n    try {\r\n        return sessionStorage.getItem(key);\r\n    } catch (e) {\r\n        warn(`Error on getting sessionStorage by name ${key} (${e})`);\r\n        return memoryStorage[key] || null;\r\n    }\r\n\r\n};\r\n\r\nexport const removeSessionStorage = (name) => {\r\n    try {\r\n        delete memoryStorage[name];\r\n        sessionStorage.removeItem(name);\r\n    } catch (error) {\r\n        warn(`Error on removing sessionStorage by ${name} key!`);\r\n    }\r\n};\r\n\r\nexport const clearSessionStorage = () => {\r\n    try {\r\n        memoryStorage = {};\r\n        sessionStorage.clear();\r\n    } catch (e) {\r\n        warn(`Error on clearing sessionStorage!`);\r\n    }\r\n};\r\n","import { NotificationManager } from \"react-notifications\";\r\n\r\nexport const notifyInfo = (message, title, time, cb) => NotificationManager.info(message, title, time, cb);\r\nexport const notifySuccess = (message, title, time, cb) => NotificationManager.success(message, title, time, cb);\r\nexport const notifyWarning = (message, title, time, cb) => NotificationManager.warning(message, title, time, cb);\r\nexport const notifyError = (message, title, time, cb) => NotificationManager.error(message, title, time, cb);\r\n","// import axios as http from 'axios';\r\n//\r\n// export const CancelToken = axios.CancelToken;\r\n// export const isCancel = axios.isCancel;\r\nimport { getSessionStorage } from \"../utils/storage\";\r\nimport {Routes} from \"../Router\";\r\nimport { notifyError } from \"./notify\";\r\n\r\nconst axios = require('axios').create({\r\n    baseURL: process.env.REACT_APP_API_URL\r\n});\r\n\r\naxios.interceptors.request.use(config => {\r\n    let accessToken = getSessionStorage('token');\r\n    if (accessToken) {\r\n        config.headers['token'] = accessToken\r\n    }\r\n\r\n    return config;\r\n});\r\n\r\n// axios.interceptors.response.use(res => res, e => {\r\n//     if (!e.response || !e.response.status)\r\n//     return Promise.reject(e);\r\n//\r\n//     switch (e.response.status) {\r\n//         case 401:\r\n//             history.push('/topics');\r\n//             // window.location.href = `${process.env.REACT_APP_BASE_HREF}/login`;\r\n//             break\r\n//     }\r\n//\r\n//     return Promise.reject(e)\r\n// });\r\n\r\nexport const setupInterceptors = (history) => {\r\n    axios.interceptors.response.use(res => res, e => {\r\n\r\n        if (!e.response || !e.response.status)\r\n            return Promise.reject(e);\r\n\r\n        switch (e.response.status) {\r\n            case 401:\r\n                history.push(Routes.Login);\r\n                notifyError('Session expired');\r\n                break;\r\n            default: notifyError(e.response.data);\r\n        }\r\n\r\n        return Promise.reject(e)\r\n    });\r\n};\r\n\r\nexport default axios;\r\n","import axios from \"../plugins/axios\";\r\n\r\nexport const login = (data) => axios.post('users/login', data);\r\nexport const register = (data) => axios.post('users/register', data);\r\nexport const logout = () => axios.get('users/logout');\r\n\r\nexport const getCompanies = () => axios.get('companies');\r\n\r\nexport const getUser = () => axios.get('users');\r\nexport const updateUser = (data) => axios.put('users/update', data);\r\n\r\nexport const getTopics = () => axios.get('topics');\r\nexport const addTopic = (data) => axios.post('topics', data);\r\nexport const voteTopic = (id, data) => axios.post(`topics/${id}/voting`, data);\r\nexport const deleteTopic = (id) => axios.delete(`topics/${id}`);\r\n\r\n\r\nexport const getProjects = () => axios.get('projects');\r\nexport const voteProject = (id, data) => axios.delete(`projects/${id}/voting`, data);\r\n\r\n","import * as endpoints from \"../utils/endpoints\";\r\nimport { notifySuccess } from \"../plugins/notify\";\r\n\r\nexport function userFetchSuccess (user) {\r\n    return {\r\n        type: 'USER_FETCH_SUCCESS',\r\n        user\r\n    }\r\n\r\n}\r\n\r\nexport function logout() {\r\n    return (dispatch) => {\r\n        return endpoints.logout()\r\n            .then((response) => {\r\n                if (response.status !== 200) {\r\n                    throw Error(response.statusText);\r\n                }\r\n\r\n                notifySuccess('Logout success');\r\n                console.log('response users', response);\r\n                return response;\r\n            })\r\n        .catch((err) => console.log(err));\r\n    };\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { NavLink, withRouter } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { logout } from \"../actions/auth\";\r\nimport { Routes } from \"../Router\";\r\nimport { removeSessionStorage } from \"../utils/storage\"\r\n\r\nclass Header extends Component {\r\n    state = {\r\n        isMobile: null,\r\n        isOpen: false,\r\n        sources: [],\r\n        show: false,\r\n        search: ''\r\n    };\r\n\r\n    attemptLogout = () => {\r\n        this.props.logout()\r\n            .then(res => {\r\n                if (res) {\r\n                    removeSessionStorage('token');\r\n                    this.props.history.push(Routes.Login)\r\n                }\r\n            })\r\n    };\r\n\r\n    renderNavItems = () => {\r\n        return (\r\n            <>\r\n                <ul className=\"nav\">\r\n                    <li className=\"nav-item\">\r\n                        <NavLink\r\n                            to={Routes.Home}\r\n                            className=\"nav-link\"\r\n                            activeClassName='active'>Home</NavLink>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <NavLink\r\n                            to={Routes.Topics}\r\n                            className=\"nav-link\"\r\n                            activeClassName='active'>Topics</NavLink>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <NavLink\r\n                            to={Routes.Projects}\r\n                            className=\"nav-link\"\r\n                            activeClassName='active'>Projects</NavLink>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <NavLink\r\n                            to={Routes.Profile}\r\n                            className=\"nav-link\"\r\n                            activeClassName='active'>Profile</NavLink>\r\n                    </li>\r\n                </ul>\r\n                <button onClick={this.attemptLogout} type=\"button\" className=\"btn btn-info\">Logout</button>\r\n            </>\r\n        )\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"fixed-top\">\r\n                <nav className=\"navbar navbar-light\" style={{ backgroundColor: \"#e3f2fd\" }}>\r\n                    { this.renderNavItems() }\r\n                </nav>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n     logout: () => dispatch(logout())\r\n    }\r\n);\r\n\r\nexport default withRouter(connect(null, mapDispatchToProps)(Header));\r\n","import * as endpoints from \"../utils/endpoints\";\r\nimport { notifySuccess } from \"../plugins/notify\";\r\n\r\nexport function userFetchSuccess (user) {\r\n    return {\r\n        type: 'USER_FETCH_SUCCESS',\r\n        user\r\n    }\r\n\r\n}\r\n\r\nexport function getUser() {\r\n    return (dispatch) => {\r\n        // dispatch(itemsAreLoading(true));\r\n\r\n        return endpoints.getUser()\r\n            .then((response) => {\r\n                if (response.status !== 200) {\r\n                    throw Error(response.statusText);\r\n                }\r\n\r\n                // dispatch(itemsAreLoading(false));\r\n                console.log('response users', response);\r\n                return response;\r\n            })\r\n            .then((response) => dispatch(userFetchSuccess(response.data)))\r\n            // .catch(() => dispatch(itemsHaveError(true)));\r\n    };\r\n}\r\n\r\nexport function updateUser(payload) {\r\n    return (dispatch) => {\r\n        // dispatch(itemsAreLoading(true));\r\n\r\n        endpoints.updateUser(payload)\r\n            .then((response) => {\r\n                if (response.status !== 200) {\r\n                    throw Error(response.statusText);\r\n                }\r\n\r\n                // dispatch(itemsAreLoading(false));\r\n                notifySuccess('User updated successfully');\r\n                return response;\r\n            })\r\n            .then((response) => dispatch(userFetchSuccess(response.data)))\r\n        // .catch(() => dispatch(itemsHaveError(true)));\r\n    };\r\n}\r\n","import React from \"react\";\r\nimport {\r\n    Route as ReactRoute,\r\n    Redirect\r\n} from \"react-router-dom\";\r\nimport { getSessionStorage } from \"../utils/storage\";\r\nimport { Routes } from \"../Router\";\r\nimport {setupInterceptors} from \"../plugins/axios\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Header from \"./Header\";\r\nimport { getUser } from \"../actions/user\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nconst Route = ({ guard, component: Component, fetchUser, user, ...rest}) => {\r\n    let isLoggedIn = !!getSessionStorage('token');\r\n    setupInterceptors(rest.history);\r\n\r\n    if (guard) {\r\n        if (isLoggedIn) {\r\n            if (rest.path === Routes.Root) {\r\n                return <Redirect to={Routes.Home}/>\r\n            }\r\n\r\n            if (!Object.keys(user).length) {\r\n                fetchUser()\r\n                    // .then(res => {\r\n                    //     console.log('thennnnnn', res);\r\n                    //     return (\r\n                    //         <>\r\n                    //             <Header />\r\n                    //             <ReactRoute {...rest} component={Component} />\r\n                    //         </>\r\n                    //     );\r\n                    // })\r\n            }\r\n\r\n            return (\r\n                <>\r\n                    <Header />\r\n                    <ReactRoute {...rest} component={Component} />\r\n                </>\r\n            );\r\n        }\r\n        return <Redirect to={Routes.Login} />\r\n    } else if (isLoggedIn) {\r\n        return <Redirect to={Routes.Home} />;\r\n    }\r\n\r\n    return <ReactRoute component={Component} {...rest} />\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.user\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchUser: () => dispatch(getUser())\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Route));\r\n","import React, { Component } from \"react\";\r\n\r\nclass Home extends Component{\r\n    render() {\r\n        return (\r\n            <div>Home</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;\r\n\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\"\r\nimport { Field, ErrorMessage } from \"formik\";\r\n\r\nconst Input = ({\r\n                   id,\r\n                   name,\r\n                   className,\r\n                   label,\r\n                   ...rest\r\n               }) => {\r\n\r\n    const classes = () => {\r\n        return (\r\n            {\r\n                radio: 'form-check-input',\r\n                checkbox: 'form-check-input'\r\n            }[rest.type] || 'form-control'\r\n        )\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <label htmlFor={rest.type === 'radio' ? id : name}>{label}</label>\r\n            <Field name={name}\r\n                   className={classes()}\r\n                   id={id}\r\n                   {...rest} />\r\n            <ErrorMessage component=\"div\"\r\n                          name={name}\r\n                          className=\"text-error\"/>\r\n        </>\r\n    )\r\n};\r\n\r\nInput.propTypes = {\r\n    placeholder: PropTypes.string,\r\n    name: PropTypes.string.isRequired,\r\n    id: PropTypes.string,\r\n    value: PropTypes.any,\r\n    type: PropTypes.string,\r\n    className: PropTypes.string,\r\n    rows: PropTypes.number\r\n};\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\nimport Input from \"../components/Input\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Routes } from \"../Router\";\r\nimport { login } from \"../utils/endpoints\";\r\nimport { setSessionStorage } from \"../utils/storage\";\r\nimport {Formik, Form } from 'formik';\r\nimport * as yup from 'yup';\r\n\r\nconst Login = ({ history }) => {\r\n    const initialValues = {\r\n        email: '',\r\n        password: ''\r\n    };\r\n\r\n    const LOGIN_VALIDATION_SCHEMA = yup.object().shape({\r\n        email: yup.string().email('Email should be valid email').required(\"Email is required\"),\r\n        password: yup.string().required(\"Password is required\")\r\n    });\r\n\r\n    const attemptLogin = (values) => {\r\n        login(values)\r\n            .then(res => {\r\n                if (res.status === 200) {\r\n                    console.log('res reg', res.data);\r\n                    setSessionStorage('token', res.data.token);\r\n                    history.push('/home');\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                validationSchema={LOGIN_VALIDATION_SCHEMA}\r\n                onSubmit={attemptLogin}\r\n            >\r\n                <Form>\r\n                    <div className=\"form-group row justify-content-center\">\r\n                        <div className=\"col-sm-10 col-md-6\">\r\n                            <Input name=\"email\"\r\n                                   label=\"Email\"\r\n                                   placeholder=\"Enter Email\" />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"form-group row justify-content-center\">\r\n                        <div className=\"col-sm-10 col-md-6\">\r\n                            <Input name=\"password\"\r\n                                   label=\"Password\"\r\n                                   type=\"password\"\r\n                                   placeholder=\"Enter password\" />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"form-group row justify-content-center\">\r\n                        <div className=\"col-sm-10 col-md-6\">\r\n                            <button type=\"submit\"\r\n                                    className=\"btn btn-info float-right\">Login</button>\r\n                        </div>\r\n                    </div>\r\n                </Form>\r\n            </Formik>\r\n            <div className=\"form-group row justify-content-center\">\r\n                <div className=\"col-sm-10 col-md-6 d-flex align-items-center\">\r\n                    <div>Don't have account, go to</div>\r\n                    <Link to={Routes.SignUp}>\r\n                        <button className=\"btn btn-link float-right\">Register</button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n            {/*<form>*/}\r\n            {/*    <div className=\"form-group row\">*/}\r\n            {/*        /!*<input value={values.email}*!/*/}\r\n            {/*        /!*       onChange={handleChange}*!/*/}\r\n            {/*        /!*       onBlur={handleBlur}*!/*/}\r\n            {/*        /!*       className={`form-control ${touched.email ? 'is-invalid' : ''}`}*!/*/}\r\n            {/*        /!*       type=\"text\"*!/*/}\r\n            {/*        /!*       name=\"email\"*!/*/}\r\n            {/*        /!*       id=\"email\" />*!/*/}\r\n            {/*        /!*<div className=\"text-error\">{ touched.email ? errors.email : undefined }</div>*!/*/}\r\n            {/*    </div>*/}\r\n\r\n            {/*    <div className=\"form-group row\">*/}\r\n            {/*        <label htmlFor=\"inputEmail3\" className=\"col-sm-2 col-form-label\">Email</label>*/}\r\n            {/*        <div className=\"col-sm-10\">*/}\r\n            {/*            <FormField value={this.state.fields.email}*/}\r\n            {/*                       onChange={this.onInputChange}*/}\r\n            {/*                       type=\"email\"*/}\r\n            {/*                       id=\"inputEmail\"*/}\r\n            {/*                       name=\"email\"*/}\r\n            {/*                       placeholder=\"Type your email\" />*/}\r\n            {/*        </div>*/}\r\n            {/*    </div>*/}\r\n            {/*    <div className=\"form-group row\">*/}\r\n            {/*        <label htmlFor=\"password\" className=\"col-sm-2 col-form-label\">Password</label>*/}\r\n            {/*        <div className=\"col-sm-10\">*/}\r\n            {/*            <FormField value={this.state.fields.password}*/}\r\n            {/*                       onChange={this.onInputChange}*/}\r\n            {/*                       type=\"password\"*/}\r\n            {/*                       id=\"password\"*/}\r\n            {/*                       name=\"password\"*/}\r\n            {/*                       placeholder=\"Type your password\" />*/}\r\n            {/*        </div>*/}\r\n            {/*    </div>*/}\r\n            {/*    <div className=\"form-group row\">*/}\r\n            {/*        <div className=\"col-sm-2\">Checkbox</div>*/}\r\n            {/*        <div className=\"col-sm-10\">*/}\r\n            {/*            <div className=\"form-check\">*/}\r\n            {/*                <input className=\"form-check-input\" type=\"checkbox\" id=\"gridCheck1\" />*/}\r\n            {/*                <label className=\"form-check-label\" htmlFor=\"gridCheck1\">*/}\r\n            {/*                    Example checkbox*/}\r\n            {/*                </label>*/}\r\n            {/*            </div>*/}\r\n            {/*        </div>*/}\r\n            {/*    </div>*/}\r\n            {/*    <div className=\"form-group row\">*/}\r\n            {/*        <div className=\"col-sm-10\">*/}\r\n            {/*            <button onClick={handleSubmit}*/}\r\n            {/*                    disabled={!isValid}*/}\r\n            {/*                    type=\"submit\" className=\"btn btn-info float-right\">Submit</button>*/}\r\n            {/*        </div>*/}\r\n            {/*    </div>*/}\r\n            {/*</form>*/}\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Login\r\n","import moment from \"moment\";\r\n\r\nexport const formatDate = (date, format = 'YYYY-MM-DD') => {\r\n    return moment(date).format(format)\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\"\r\nimport { Field, ErrorMessage } from \"formik\";\r\n\r\nconst Dropdown = ({\r\n                   name,\r\n                   className,\r\n                   label,\r\n                   options,\r\n                   ...rest\r\n               }) => {\r\n    return (\r\n        <>\r\n            <label htmlFor={name}>{label}</label>\r\n            <Field\r\n                as=\"select\"\r\n                name={name}\r\n                className={className || \"form-control\"}\r\n                {...rest}>\r\n                <option value=\"\">Default select</option>\r\n                {\r\n                    options.map((item, i) => (\r\n                        <option value={item.id}\r\n                                key={item.id + i}>{item.name}</option>\r\n                    ))\r\n                }\r\n            </Field>\r\n            <ErrorMessage component=\"div\"\r\n                          name={name}\r\n                          className=\"text-error\"/>\r\n        </>\r\n    )\r\n};\r\n\r\nDropdown.propTypes = {\r\n    options: PropTypes.array.isRequired,\r\n    placeholder: PropTypes.string,\r\n    name: PropTypes.string.isRequired,\r\n    className: PropTypes.string,\r\n};\r\n\r\nexport default Dropdown;\r\n","import React from \"react\";\r\nimport { useField, useFormikContext, ErrorMessage } from \"formik\";\r\nimport DatePicker from 'react-date-picker';\r\n\r\nconst DatePickerField = ({ ...props }) => {\r\n    const { setFieldValue } = useFormikContext();\r\n    const [field] = useField(props);\r\n    return (\r\n        <div className=\"d-flex flex-column\">\r\n            <label htmlFor={props.name}>{props.label}</label>\r\n            <DatePicker\r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || ''}\r\n                onChange={val => {\r\n                    setFieldValue(field.name, val);\r\n                }}\r\n            />\r\n            <ErrorMessage component=\"div\"\r\n                          name={props.name}\r\n                          className=\"text-error\"/>\r\n         </div>\r\n    );\r\n};\r\n\r\nexport default DatePickerField\r\n","import React, { Component } from \"react\";\r\nimport { formatDate } from \"../utils/helpers\";\r\nimport Input from \"../components/Input\";\r\nimport Dropdown from \"../components/Dropdown\"\r\nimport DatePickerField from \"../components/DatePickerField\";\r\nimport { getCompanies, register } from \"../utils/endpoints\";\r\nimport { Formik, Form } from 'formik';\r\nimport * as yup from 'yup';\r\nimport {Link} from \"react-router-dom\";\r\nimport {Routes} from \"../Router\";\r\n\r\nclass SignUp extends Component {\r\n    state = {\r\n        // fields: {\r\n        //     email: '',\r\n        //     password: '',\r\n        //     firstName: 'Lil',\r\n        //     lastName: 'Kh',\r\n        //     birthDate: new Date(),\r\n        //     sex: 'male',\r\n        //     avatarUrl: 'https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_960_720.png',\r\n        //     jsExperience: 2,\r\n        //     reactExperience: 1,\r\n        //     companyId: ''\r\n        // },\r\n        // fieldErrors: {},\r\n        companies: [],\r\n        rememberMe: false\r\n    };\r\n\r\n    initialValues = {\r\n        email: '',\r\n        password: '',\r\n        firstName: 'Lil',\r\n        lastName: 'Kh',\r\n        birthDate: new Date(),\r\n        sex: 'male',\r\n        avatarUrl: 'https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_960_720.png',\r\n        jsExperience: 0,\r\n        reactExperience: 0,\r\n        companyId: ''\r\n    };\r\n\r\n    SIGNUP_VALIDATION_SCHEMA = yup.object().shape({\r\n        fistName: yup\r\n            .string()\r\n            .required(\"First name is required\"),\r\n        lastName: yup\r\n            .string()\r\n            .required(\"Last name is required\"),\r\n        birthDate: yup\r\n            .date()\r\n            .min(new Date(1900, 0, 1))\r\n            .required(\"Birth date is required\"),\r\n        sex: yup\r\n            .mixed()\r\n            .oneOf(['male', 'female']),\r\n        avatarUrl: yup\r\n            .string()\r\n            .required(\"Avatar is required\"),\r\n        jsExperience: yup\r\n            .number()\r\n            .required(\"JS experience is required\"),\r\n        reactExperience: yup\r\n            .number()\r\n            .required(\"React experience is required\"),\r\n        companyId: yup\r\n            .number()\r\n            .required(\"Company is required\"),\r\n        email: yup\r\n            .string()\r\n            .email('Email should be valid email').required(\"Email is required\"),\r\n        password: yup\r\n            .string()\r\n            .required(\"Password is required\")\r\n    });\r\n\r\n    // onInputChange = ({ name, value, error }) => {\r\n    //     const { fields, fieldErrors } = this.state;\r\n    //     fields[name] = value;\r\n    //     fieldErrors[name] = error;\r\n    //     this.setState({ fields, fieldErrors })\r\n    // };\r\n\r\n    onRememberMeChange = ({ value }) => {\r\n        this.setState({ rememberMe: value })\r\n    };\r\n\r\n    // onDateChange = (date) => {\r\n    //     const { fields } = this.state;\r\n    //     fields.birthDate = formatDate(date);\r\n    //     this.setState({ fields })\r\n    // };\r\n    //\r\n    // onSelectCompany = (e) => {\r\n    //     const companyId = e.target.value ? e.target.value : null;\r\n    //     this.setState({ fields: { ...this.state.fields, companyId } });\r\n    // };\r\n\r\n    attemptSignUp = (values) => {\r\n        const payload = {\r\n            ...values,\r\n            companyId: Number(values.companyId),\r\n            birthDate: formatDate(values.birthDate)\r\n        };\r\n\r\n        register(payload)\r\n            .then(res => {\r\n                if (res.status === 200) {\r\n                    console.log('res reg', res.data);\r\n                    this.props.history.push('/login')\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.getCompaniesFromServer()\r\n    }\r\n\r\n    getCompaniesFromServer = () => {\r\n        getCompanies()\r\n            .then(res => {\r\n                console.log('res', res);\r\n                this.setState({ companies: res.data })\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Formik\r\n                    initialValues={this.initialValues}\r\n                    validationSchema={this.SIGNUP_VALIDATION_SCHEMA}\r\n                    onSubmit={this.attemptSignUp}\r\n                >\r\n                    {(formik) => (\r\n                        <Form onSubmit={formik.handleSubmit}>\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <Input name=\"firstName\"\r\n                                           label=\"First name\"\r\n                                           placeholder=\"Enter first name\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <Input name=\"lastName\"\r\n                                           label=\"Last name\"\r\n                                           placeholder=\"Enter Last name\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <DatePickerField name=\"birthDate\"\r\n                                                     id=\"birthDate\"\r\n                                                     label=\"Birth date\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <div className=\"form-check d-flex\">\r\n                                        <Input id=\"male\"\r\n                                               label=\"Male\"\r\n                                               type=\"radio\"\r\n                                               value=\"male\"\r\n                                               name='sex'\r\n                                               checked={formik.values.sex=== \"male\"} />\r\n                                    </div>\r\n                                    <div className=\"form-check d-flex\">\r\n                                        <Input value=\"female\"\r\n                                               label=\"Female\"\r\n                                               type=\"radio\"\r\n                                               name=\"sex\"\r\n                                               id=\"female\"\r\n                                               checked={formik.values.sex === 'female'}/>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <Input name=\"email\"\r\n                                           label=\"Email\"\r\n                                           placeholder=\"Enter Email\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <Input name=\"password\"\r\n                                           label=\"Password\"\r\n                                           type=\"password\"\r\n                                           placeholder=\"Enter password\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <Input name=\"jsExperience\"\r\n                                           label=\"JS experience\"\r\n                                           type=\"number\"\r\n                                           placeholder=\"Enter your JS experience in month\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <Input name=\"reactExperience\"\r\n                                           label=\"React experience\"\r\n                                           type=\"number\"\r\n                                           placeholder=\"Enter your React experience in month\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <Dropdown name=\"companyId\"\r\n                                              label=\"Company\"\r\n                                              options={this.state.companies}/>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <div className=\"form-check\">\r\n                                        <input value={this.state.rememberMe}\r\n                                               onChange={this.onRememberMeChange}\r\n                                               type=\"checkbox\"\r\n                                               name=\"rememberMe\"\r\n                                               id=\"rememberMe\"\r\n                                               aria-label=\"...\" />\r\n                                        <label htmlFor=\"rememberMe\"\r\n                                               className=\"form-check-label\">Remember me</label>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <button onClick={formik.handleSubmit}\r\n                                            type=\"submit\"\r\n                                            className=\"btn btn-info float-right\">Sign up</button>\r\n                                </div>\r\n                            </div>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <div className=\"form-group row justify-content-center\">\r\n                    <div className=\"col-sm-10 col-md-6 d-flex align-items-center\">\r\n                        <div>Already have account, go to</div>\r\n                        <Link to={Routes.Login}>\r\n                            <button className=\"btn btn-link float-right\">Login</button>\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n\r\n                {/*<form>*/}\r\n                {/*    <div className=\"form-group row\">*/}\r\n                {/*        <div className=\"col-sm-10\">*/}\r\n                {/*            <FormField value={this.state.fields.firstName}*/}\r\n                {/*                       onChange={this.onInputChange}*/}\r\n                {/*                       id=\"firstName\"*/}\r\n                {/*                       name=\"firstName\"*/}\r\n                {/*                       placeholder=\"Type your firstName\" />*/}\r\n                {/*        </div>*/}\r\n                {/*    </div>*/}\r\n                {/*    <div className=\"form-group row\">*/}\r\n                {/*        <div className=\"col-sm-10\">*/}\r\n                {/*            <FormField value={this.state.fields.lastName}*/}\r\n                {/*                       onChange={this.onInputChange}*/}\r\n                {/*                       id=\"lastName\"*/}\r\n                {/*                       name=\"lastName\"*/}\r\n                {/*                       placeholder=\"Type your lastName\" />*/}\r\n                {/*        </div>*/}\r\n                {/*    </div>*/}\r\n                {/*    <div className=\"form-group row\">*/}\r\n                {/*        <label htmlFor=\"inputEmail3\" className=\"col-sm-2 col-form-label\">Email</label>*/}\r\n                {/*        <div className=\"col-sm-10\">*/}\r\n                {/*            <FormField value={this.state.fields.email}*/}\r\n                {/*                       onChange={this.onInputChange}*/}\r\n                {/*                       type=\"email\"*/}\r\n                {/*                       id=\"inputEmail\"*/}\r\n                {/*                       name=\"email\"*/}\r\n                {/*                       placeholder=\"Type your email\" />*/}\r\n                {/*        </div>*/}\r\n                {/*    </div>*/}\r\n                {/*    <div className=\"form-group row\">*/}\r\n                {/*        <label htmlFor=\"password\" className=\"col-sm-2 col-form-label\">Password</label>*/}\r\n                {/*        <div className=\"col-sm-10\">*/}\r\n                {/*            <FormField value={this.state.fields.password}*/}\r\n                {/*                       onChange={this.onInputChange}*/}\r\n                {/*                       type=\"password\"*/}\r\n                {/*                       id=\"password\"*/}\r\n                {/*                       name=\"password\"*/}\r\n                {/*                       placeholder=\"Type your password\" />*/}\r\n                {/*        </div>*/}\r\n                {/*    </div>*/}\r\n                {/*    <fieldset className=\"form-group\" >*/}\r\n                {/*        <div className=\"row\">*/}\r\n                {/*            <legend className=\"col-form-label col-sm-2 pt-0\">Radios</legend>*/}\r\n                {/*            <div className=\"col-sm-10\">*/}\r\n                {/*                <div className=\"form-check d-flex\">*/}\r\n                {/*                    <FormField  value=\"male\"*/}\r\n                {/*                               onChange={this.onInputChange}*/}\r\n                {/*                                checked={this.state.fields.sex === \"male\"}*/}\r\n                {/*                                className=\"form-check-input\"*/}\r\n                {/*                                type=\"radio\"*/}\r\n                {/*                                name=\"sex\"*/}\r\n                {/*                                id=\"male\" />*/}\r\n                {/*                </div>*/}\r\n                {/*                <div className=\"form-check d-flex\">*/}\r\n                {/*                    <FormField  value=\"female\"*/}\r\n                {/*                                onChange={this.onInputChange}*/}\r\n                {/*                                checked={this.state.fields.sex === \"female\"}*/}\r\n                {/*                                className=\"form-check-input\"*/}\r\n                {/*                                type=\"radio\"*/}\r\n                {/*                                name=\"sex\"*/}\r\n                {/*                                id=\"female\" />*/}\r\n                {/*                </div>*/}\r\n                {/*            </div>*/}\r\n                {/*        </div>*/}\r\n                {/*    </fieldset>*/}\r\n                {/*    <div className=\"form-group row\">*/}\r\n                {/*        <label htmlFor=\"password\" className=\"col-sm-2 col-form-label\">Password</label>*/}\r\n                {/*        <div className=\"col-sm-10\">*/}\r\n                {/*            <DatePicker*/}\r\n                {/*                onChange={this.onDateChange}*/}\r\n                {/*                value={this.state.fields.birthDate}*/}\r\n                {/*            />*/}\r\n                {/*        </div>*/}\r\n                {/*    </div>*/}\r\n                {/*    <div className=\"form-group row\">*/}\r\n                {/*        <label htmlFor=\"validationDefault04\">State</label>*/}\r\n                {/*        <select onChange={this.onSelectCompany}*/}\r\n                {/*                value={this.state.fields.companyId || ''}*/}\r\n                {/*                className=\"form-control mb-3\">*/}\r\n                {/*            <option value=\"\">Default select</option>*/}\r\n                {/*            {*/}\r\n                {/*                this.state.companies.map((company, i) => (*/}\r\n                {/*                    <option value={company.id}*/}\r\n                {/*                            key={company.id + i}>{company.name}</option>*/}\r\n                {/*                ))*/}\r\n                {/*            }*/}\r\n                {/*        </select>*/}\r\n                {/*    </div>*/}\r\n                {/*    <div className=\"form-group row\">*/}\r\n                {/*        <div className=\"col-sm-10\">*/}\r\n                {/*            <div className=\"form-check d-flex\">*/}\r\n                {/*                <FormField  value={this.state.rememberMe}*/}\r\n                {/*                            onChange={this.onRememberMeChange}*/}\r\n                {/*                            className=\"form-check-input\"*/}\r\n                {/*                            type=\"checkbox\"*/}\r\n                {/*                            name=\"rememberMe\"*/}\r\n                {/*                            id=\"rememberMe\" />*/}\r\n                {/*            </div>*/}\r\n                {/*        </div>*/}\r\n                {/*    </div>*/}\r\n                {/*    <div className=\"form-group row\">*/}\r\n                {/*        <div className=\"col-sm-10\">*/}\r\n                {/*            <button onClick={this.onSubmit}*/}\r\n                {/*                    type=\"submit\" className=\"btn btn-info float-right\">Submit</button>*/}\r\n                {/*        </div>*/}\r\n                {/*    </div>*/}\r\n                {/*</form>*/}\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SignUp\r\n","import * as endpoints from \"../utils/endpoints\";\r\nimport { notifySuccess } from \"../plugins/notify\";\r\n\r\nexport function topicsFetchSuccess (topics) {\r\n    return {\r\n        type: 'TOPICS_FETCH_SUCCESS',\r\n        topics\r\n    }\r\n\r\n}\r\n\r\nexport function topicAddSuccess (topic) {\r\n    return {\r\n        type: 'TOPIC_ADD_SUCCESS',\r\n        topic\r\n    }\r\n\r\n}\r\n\r\nexport function topicVoteSuccess (topic) {\r\n    return {\r\n        type: 'TOPIC_VOTED_SUCCESS',\r\n        topic\r\n    }\r\n\r\n}\r\n\r\nexport function topicDeleteSuccess (id) {\r\n    return {\r\n        type: 'TOPIC_DELETE_SUCCESS',\r\n        id\r\n    }\r\n\r\n}\r\n\r\nexport function getTopics() {\r\n    return (dispatch) => {\r\n        // dispatch(itemsAreLoading(true));\r\n\r\n        return endpoints.getTopics()\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    dispatch(topicsFetchSuccess(response.data))\r\n                }\r\n            })\r\n            .catch((err) => console.log(err));\r\n    };\r\n}\r\n\r\nexport function addTopic(payload) {\r\n    return (dispatch) => {\r\n        // dispatch(itemsAreLoading(true));\r\n\r\n        endpoints.addTopic(payload)\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    dispatch(topicAddSuccess(response.data));\r\n                    dispatch(getTopics());\r\n                    notifySuccess('Topic added successfully');\r\n                }\r\n                // dispatch(itemsAreLoading(false));\r\n            })\r\n            .catch((err) => console.log(err));\r\n    };\r\n}\r\n\r\nexport function voteTopic (id, payload) {\r\n    return (dispatch) => {\r\n        // dispatch(itemsAreLoading(true));\r\n\r\n        endpoints.voteTopic(id, payload)\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    console.log('add topic', response.data);\r\n                    dispatch(topicVoteSuccess(response.data));\r\n                    notifySuccess('Topic voted successfully');\r\n                    dispatch(getTopics());\r\n                }\r\n                // dispatch(itemsAreLoading(false));\r\n            })\r\n            .catch((err) => console.log(err));\r\n    };\r\n}\r\n\r\nexport function deleteTopic (id) {\r\n    return (dispatch) => {\r\n        // dispatch(itemsAreLoading(true));\r\n\r\n        endpoints.deleteTopic(id)\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    console.log('add topic', response.data);\r\n                    dispatch(topicDeleteSuccess(response.data));\r\n                    notifySuccess('Topic deleted successfully');\r\n                    dispatch(getTopics());\r\n                }\r\n                // dispatch(itemsAreLoading(false));\r\n            })\r\n        .catch((err) => console.log(err));\r\n    };\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getTopics, deleteTopic, voteTopic, addTopic } from \"../actions/topics\"\r\nimport Input from \"../components/Input\";\r\nimport {Form, Formik} from \"formik\";\r\nimport * as yup from \"yup\";\r\n\r\nclass Topics extends Component {\r\n    initialValues = {\r\n        title: ''\r\n    };\r\n\r\n    TOPIC_VALIDATION_SCHEMA = yup.object().shape({\r\n        title: yup\r\n            .string()\r\n            .required(\"Topic title is required\")\r\n    });\r\n\r\n    componentDidMount() {\r\n        this.props.getTopics()\r\n    }\r\n\r\n    attemptAdd = (values) => {\r\n        this.props.addTopic(values);\r\n    };\r\n\r\n    render() {\r\n        console.log('this.props.topics', this.props.topics);\r\n        const { topics } = this.props;\r\n\r\n        return (\r\n            <>\r\n                <Formik\r\n                    initialValues={this.initialValues}\r\n                    validationSchema={this.TOPIC_VALIDATION_SCHEMA}\r\n                    onSubmit={this.attemptAdd}\r\n                >\r\n                    <Form>\r\n                        <div className=\"form-group row justify-content-center\">\r\n                            <div className=\"col-sm-10 col-md-6\">\r\n                                <Input name=\"title\" type=\"text\"/>\r\n                            </div>\r\n                            <div className=\"col-sm-10 col-md-6\">\r\n                                <button type=\"submit\"\r\n                                        className=\"btn btn-info float-right mt-3\">Add</button>\r\n                            </div>\r\n                        </div>\r\n                    </Form>\r\n                </Formik>\r\n\r\n                <ul className=\"list-group\">\r\n                    {\r\n\r\n                        topics.map(item => (\r\n                            <li className=\"list-group-item\"\r\n                                key={item.id}>\r\n                                { item.title }\r\n\r\n                                <button onClick={() => this.props.voteTopic(item.id, {\r\n                                    type: item.votedByMe ? 'unlike' : 'like'\r\n                                })}\r\n                                        type=\"submit\"\r\n                                        className=\"btn btn-info float-right\">{ item.votedByMe ? 'UnVote': 'Vote'}</button>\r\n\r\n                                {\r\n                                    item.canDelete && <button onClick={() => this.props.deleteTopic(item.id)}\r\n                                                              type=\"submit\"\r\n                                                              className=\"btn btn-info float-right\">Delete</button>\r\n                                }\r\n                            </li>\r\n                        ))\r\n                    }\r\n                </ul>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    topics: state.topics.topics\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getTopics: () => dispatch(getTopics()),\r\n    deleteTopic: (id) => dispatch(deleteTopic(id)),\r\n    voteTopic: (id, payload) => dispatch(voteTopic(id, payload)),\r\n    addTopic: (payload) => dispatch(addTopic(payload))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Topics)\r\n","import React, { Component } from \"react\";\r\nimport { formatDate } from \"../utils/helpers\";\r\nimport Input from \"../components/Input\";\r\nimport Dropdown from \"../components/Dropdown\"\r\nimport DatePickerField from \"../components/DatePickerField\";\r\nimport { getCompanies } from \"../utils/endpoints\";\r\nimport { Formik, Form } from 'formik';\r\nimport * as yup from 'yup';\r\nimport UserForm from \"../components/UserForm\";\r\nimport { connect } from \"react-redux\";\r\nimport { updateUser } from \"../actions/user\";\r\n\r\nclass Profile extends Component {\r\n    state = {\r\n        companies: []\r\n    };\r\n\r\n    initialValues = {\r\n        email: '',\r\n        firstName: 'Lil',\r\n        lastName: 'Kh',\r\n        birthDate: new Date(),\r\n        sex: 'male',\r\n        avatarUrl: 'https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_960_720.png',\r\n        jsExperience: 0,\r\n        reactExperience: 0,\r\n        companyId: ''\r\n    };\r\n\r\n    USER_VALIDATION_SCHEMA = yup.object().shape({\r\n        fistName: yup\r\n            .string()\r\n            .required(\"First name is required\"),\r\n        lastName: yup\r\n            .string()\r\n            .required(\"Last name is required\"),\r\n        birthDate: yup\r\n            .date()\r\n            .min(new Date(1900, 0, 1))\r\n            .required(\"Birth date is required\"),\r\n        sex: yup\r\n            .mixed()\r\n            .oneOf(['male', 'female']),\r\n        avatarUrl: yup\r\n            .string()\r\n            .required(\"Avatar is required\"),\r\n        jsExperience: yup\r\n            .number()\r\n            .required(\"JS experience is required\"),\r\n        reactExperience: yup\r\n            .number()\r\n            .required(\"React experience is required\"),\r\n        companyId: yup\r\n            .number()\r\n            .required(\"Company is required\"),\r\n        email: yup\r\n            .string()\r\n            .email('Email should be valid email').required(\"Email is required\")\r\n    });\r\n\r\n    attemptUpdate = (values) => {\r\n        const payload = {\r\n            ...values,\r\n            companyId: Number(values.companyId),\r\n            birthDate: formatDate(values.birthDate)\r\n        };\r\n\r\n        this.props.editUser(payload)\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.getCompaniesFromServer()\r\n    }\r\n\r\n    getCompaniesFromServer = () => {\r\n        getCompanies()\r\n            .then(res => {\r\n                this.setState({ companies: res.data })\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    };\r\n\r\n    render() {\r\n        let { user } = this.props;\r\n\r\n        if (!Object.keys(user).length) {\r\n            return (<div>Lodaing...</div>)\r\n        }\r\n\r\n        user = {...user, birthDate: new Date(user.birthDate) };\r\n\r\n        return (\r\n            <>\r\n              {/*<UserForm attemptSubmit={this.attemptUpdate}*/}\r\n              {/*          users={ {...this.props.users, birthDate: new Date(this.props.users.birthDate) }}*/}\r\n              {/*          submitText=\"Update\" />*/}\r\n                <Formik\r\n                    initialValues={user}\r\n                    validateOnMount={false}\r\n                    // validationSchema={this.USER_VALIDATION_SCHEMA}\r\n                    onSubmit={this.attemptUpdate}\r\n                >\r\n                    {(formik) => (\r\n                        <Form onSubmit={formik.handleSubmit}>\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <Input name=\"firstName\"\r\n                                           label=\"First name\"\r\n                                           placeholder=\"Enter first name\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <Input name=\"lastName\"\r\n                                           label=\"Last name\"\r\n                                           placeholder=\"Enter Last name\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <DatePickerField name=\"birthDate\"\r\n                                                     id=\"birthDate\"\r\n                                                     label=\"Birth date\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <div className=\"form-check d-flex\">\r\n                                        <Input id=\"male\"\r\n                                               label=\"Male\"\r\n                                               type=\"radio\"\r\n                                               value=\"male\"\r\n                                               name='sex'\r\n                                               checked={formik.values.sex === 'male'} />\r\n                                    </div>\r\n                                    <div className=\"form-check d-flex\">\r\n                                        <Input value=\"female\"\r\n                                               label=\"Female\"\r\n                                               type=\"radio\"\r\n                                               name=\"sex\"\r\n                                               id=\"female\"\r\n                                               checked={formik.values.sex === 'female'}/>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <Input name=\"email\"\r\n                                           label=\"Email\"\r\n                                           placeholder=\"Enter Email\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <Input name=\"jsExperience\"\r\n                                           label=\"JS experience\"\r\n                                           type=\"number\"\r\n                                           placeholder=\"Enter your JS experience in month\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <Input name=\"reactExperience\"\r\n                                           label=\"React experience\"\r\n                                           type=\"number\"\r\n                                           placeholder=\"Enter your React experience in month\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <Dropdown name=\"companyId\"\r\n                                              label=\"Company\"\r\n                                              options={this.state.companies}/>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <button onClick={formik.handleSubmit}\r\n                                            type=\"submit\"\r\n                                            className=\"btn btn-info float-right\">Update</button>\r\n                                </div>\r\n                            </div>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({ user: state.user });\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        editUser: (payload) => dispatch(updateUser(payload))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile)\r\n","import React, { Component } from \"react\";\r\nimport { formatDate } from \"../utils/helpers\";\r\nimport Input from \"../components/Input\";\r\nimport Dropdown from \"../components/Dropdown\"\r\nimport DatePickerField from \"../components/DatePickerField\";\r\nimport { getCompanies } from \"../utils/endpoints\";\r\nimport { Formik, Form } from 'formik';\r\nimport * as yup from 'yup';\r\n\r\nclass UserForm extends Component {\r\n    state = {\r\n        companies: [],\r\n        rememberMe: false\r\n    };\r\n\r\n    initialValues = {\r\n        email: '',\r\n        password: '',\r\n        firstName: 'Lil',\r\n        lastName: 'Kh',\r\n        birthDate: new Date(),\r\n        sex: 'male',\r\n        avatarUrl: 'https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_960_720.png',\r\n        jsExperience: 0,\r\n        reactExperience: 0,\r\n        companyId: ''\r\n    };\r\n\r\n    USER_VALIDATION_SCHEMA = yup.object().shape({\r\n        fistName: yup\r\n            .string()\r\n            .required(\"First name is required\"),\r\n        lastName: yup\r\n            .string()\r\n            .required(\"Last name is required\"),\r\n        birthDate: yup\r\n            .date()\r\n            .min(new Date(1900, 0, 1))\r\n            .required(\"Birth date is required\"),\r\n        sex: yup\r\n            .mixed()\r\n            .oneOf(['male', 'female']),\r\n        avatarUrl: yup\r\n            .string()\r\n            .required(\"Avatar is required\"),\r\n        jsExperience: yup\r\n            .number()\r\n            .required(\"JS experience is required\"),\r\n        reactExperience: yup\r\n            .number()\r\n            .required(\"React experience is required\"),\r\n        companyId: yup\r\n            .number()\r\n            .required(\"Company is required\"),\r\n        email: yup\r\n            .string()\r\n            .email('Email should be valid email').required(\"Email is required\"),\r\n        // password: this.props.isCreate ? yup\r\n        //     .string()\r\n        //     .required(\"Password is required\") : yup\r\n        //     .string(),\r\n    });\r\n\r\n    componentDidMount() {\r\n        this.getCompaniesFromServer()\r\n    }\r\n\r\n    getCompaniesFromServer = () => {\r\n        getCompanies()\r\n            .then(res => {\r\n                console.log('res', res);\r\n                this.setState({ companies: res.data })\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    };\r\n\r\n    onSubmit = (values) => {\r\n        const payload = {\r\n            ...values,\r\n            companyId: Number(values.companyId),\r\n            birthDate: formatDate(values.birthDate)\r\n        };\r\n        console.log('aaaaaa');\r\n        this.props.attemptSubmit(payload)\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Formik\r\n                    initialValues={this.props.user || this.initialValues}\r\n                    validationSchema={this.USER_VALIDATION_SCHEMA}\r\n                    onSubmit={this.onSubmit}\r\n                >\r\n                    {(formik) => (\r\n                        <Form onSubmit={formik.handleSubmit}>\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <Input name=\"firstName\"\r\n                                           label=\"First name\"\r\n                                           placeholder=\"Enter first name\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <Input name=\"lastName\"\r\n                                           label=\"Last name\"\r\n                                           placeholder=\"Enter Last name\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <DatePickerField name=\"birthDate\"\r\n                                                     id=\"birthDate\"\r\n                                                     label=\"Birth date\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <div className=\"form-check d-flex\">\r\n                                        <Input id=\"male\"\r\n                                               label=\"Male\"\r\n                                               type=\"radio\"\r\n                                               value=\"male\"\r\n                                               name='sex'\r\n                                               checked={formik.values.sex === 'male'} />\r\n                                    </div>\r\n                                    <div className=\"form-check d-flex\">\r\n                                        <Input value=\"female\"\r\n                                               label=\"Female\"\r\n                                               type=\"radio\"\r\n                                               name=\"sex\"\r\n                                               id=\"female\"\r\n                                               checked={formik.values.sex === 'female'}/>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <Input name=\"email\"\r\n                                           label=\"Email\"\r\n                                           placeholder=\"Enter Email\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                            {this.props.isCreate &&\r\n                                <div className=\"form-group row justify-content-center\">\r\n                                    <div className=\"col-sm-10 col-md-6\">\r\n                                        <Input name=\"password\"\r\n                                               label=\"Password\"\r\n                                               type=\"password\"\r\n                                               placeholder=\"Enter password\" />\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <Dropdown name=\"companyId\"\r\n                                              label=\"Company\"\r\n                                              options={this.state.companies}/>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <button onClick={formik.handleSubmit}\r\n                                            type=\"submit\"\r\n                                            className=\"btn btn-info float-right\">{this.props.submitText}</button>\r\n                                </div>\r\n                            </div>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserForm\r\n","import * as endpoints from \"../utils/endpoints\";\r\nimport { notifySuccess } from \"../plugins/notify\";\r\n\r\nexport function projectsFetchSuccess (data) {\r\n    return {\r\n        type: 'PROJECTS_FETCH_SUCCESS',\r\n        data\r\n    }\r\n\r\n}\r\n\r\nexport function projectsVoteSuccess (data) {\r\n    return {\r\n        type: 'PROJECT_VOTED_SUCCESS',\r\n        data\r\n    }\r\n\r\n}\r\n\r\nexport function getProjects() {\r\n    return (dispatch) => {\r\n        // dispatch(itemsAreLoading(true));\r\n\r\n        return endpoints.getProjects()\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    dispatch(projectsFetchSuccess(response.data))\r\n                }\r\n            })\r\n        // .catch(() => dispatch(itemsHaveError(true)));\r\n    };\r\n}\r\n\r\nexport function voteProject (id, payload) {\r\n    return (dispatch) => {\r\n        // dispatch(itemsAreLoading(true));\r\n\r\n        endpoints.voteProject(id, payload)\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    console.log('add topic', response.data);\r\n                    dispatch(projectsVoteSuccess(response.data));\r\n                    notifySuccess('Topic added successfully');\r\n                }\r\n                // dispatch(itemsAreLoading(false));\r\n            })\r\n        // .catch(() => dispatch(itemsHaveError(true)));\r\n    };\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getProjects, voteProject } from \"../actions/projects\"\r\n\r\nclass Projects extends Component {\r\n    componentDidMount() {\r\n        this.props.getProjects()\r\n    }\r\n\r\n    render() {\r\n        console.log('this.props.topics', this.props.topics);\r\n        const { projects } = this.props;\r\n\r\n        return (\r\n            <>\r\n                <ul className=\"list-group\">\r\n                    {\r\n\r\n                        projects.map(item => (\r\n                            <li className=\"list-group-item\"\r\n                                key={item.id}>\r\n                                { item.title }\r\n                                ---\r\n                                { item.items.join(';') }\r\n\r\n                                <button onClick={() => this.props.voteProject(item.id, {\r\n                                    type: item.votedByMe ? 'unlike' : 'like'\r\n                                })}\r\n                                        type=\"submit\"\r\n                                        className=\"btn btn-info float-right\">{ item.votedByMe ? 'UnVote': 'Vote'}</button>\r\n                            </li>\r\n                        ))\r\n                    }\r\n                </ul>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    projects: state.projects.projects\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getProjects: () => dispatch(getProjects()),\r\n    voteProject: (id, payload) => dispatch(voteProject(id, payload))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Projects)\r\n","import React, {Component} from \"react\";\r\nimport { BrowserRouter as ReactRouter, Switch } from \"react-router-dom\";\r\nimport Route from \"./components/Route\";\r\nimport { Home, Login, SignUp, Topics, Profile, Projects } from \"./pages\";\r\n\r\nexport const Routes = Object.freeze({\r\n    Root: '/',\r\n    Home: '/home',\r\n    Profile: '/profile',\r\n    Projects: '/projects',\r\n    Topics: '/topics',\r\n    Login: '/login',\r\n    SignUp: '/sign-up',\r\n    NotFoundPage: '*'\r\n});\r\n\r\nconst NotFound = ({ location }) => (\r\n    <div>\r\n        <strong>Error!</strong> No route found matching:\r\n        <div>\r\n            <code>{location.pathname}</code>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nfunction Router() {\r\n    return (\r\n        <ReactRouter>\r\n            <Switch>\r\n                <Route path={Routes.Login} component={Login} />\r\n                <Route path={Routes.SignUp} component={SignUp} />\r\n                <Route guard path={Routes.Home} component={Home} />\r\n                <Route guard path={Routes.Topics} component={Topics} />\r\n                <Route guard path={Routes.Profile} component={Profile} />\r\n                <Route guard path={Routes.Projects} component={Projects} />\r\n\r\n                <Route exact guard path={Routes.Root} component={Home} />\r\n\r\n                <Route path={Routes.NotFoundPage} component={NotFound}/>\r\n            </Switch>\r\n        </ReactRouter>\r\n    );\r\n}\r\n\r\nexport default Router;\r\n","import React from 'react';\nimport './App.scss';\nimport { PageContainer } from \"./assets/styles/App.stype\";\nimport Router from \"./Router\";\nimport {NotificationContainer} from \"react-notifications\";\n\nfunction App() {\n  return (\n      <PageContainer>\n          <Router />\n          <NotificationContainer/>\n      </PageContainer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n    topics: [],\r\n    topic: {}\r\n};\r\n\r\nexport function topics (state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'TOPICS_FETCH_SUCCESS':\r\n            return {\r\n                ...state,\r\n                topics: action.topics\r\n            };\r\n        case 'TOPIC_ADD_SUCCESS':\r\n            return {\r\n                ...state,\r\n                topic: action.topic\r\n            };\r\n        case 'TOPIC_VOTED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                topic: action.topic\r\n            };\r\n        case 'TOPIC_DELETE_SUCCESS':\r\n            return {\r\n                ...state,\r\n                id: action.id\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n","const initialState = {\r\n    projects: [],\r\n    project: {}\r\n};\r\n\r\nexport function projects (state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'PRODUCTS_FETCH_SUCCESS':\r\n            return {\r\n                ...state,\r\n                projects: action.projects\r\n            };\r\n        case 'PRODUCTS_VOTED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                project: action.project\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { users } from \"./users\";\r\nimport { topics } from \"./topics\";\r\nimport { projects } from \"./projects\";\r\n\r\nexport default combineReducers({\r\n    user: users,\r\n    topics,\r\n    projects\r\n});\r\n","export function users(state = {}, action) {\r\n    switch (action.type) {\r\n        case 'USER_FETCH_SUCCESS':\r\n            return action.user;\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './assets/styles/custom.scss'\nimport { Provider } from 'react-redux'\nimport configureStore from \"./store/configureStore\";\nimport 'react-notifications/lib/notifications.css';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport reducers from \"../reducers\"\r\n\r\nexport default function configureStore (initialState = {}) {\r\n    const enhancer = applyMiddleware(thunk);\r\n\r\n    return createStore(\r\n        reducers,\r\n        initialState,\r\n        enhancer\r\n    )\r\n}\r\n"],"sourceRoot":""}