{"version":3,"sources":["assets/styles/App.stype.js","utils/logger.js","utils/storage.js","plugins/notify.js","plugins/axios.js","utils/endpoints.js","actions/auth.js","components/Header.js","actions/user.js","components/Route.js","pages/Home.js","components/Input.js","pages/Login.js","utils/helpers.js","components/Dropdown.js","components/DatePickerField.js","pages/SignUp.js","actions/topics.js","pages/Topics.js","pages/Profile.js","components/UserForm.js","actions/projects.js","pages/Projects.js","Router.js","App.js","serviceWorker.js","reducers/topics.js","reducers/projects.js","reducers/index.js","reducers/users.js","index.js","store/configureStore.js"],"names":["PageContainer","styled","div","warn","text","console","memoryStorage","getSessionStorage","key","sessionStorage","getItem","e","removeSessionStorage","name","removeItem","error","notifySuccess","message","title","time","cb","NotificationManager","success","axios","require","create","baseURL","process","interceptors","request","use","config","accessToken","headers","register","data","post","getCompanies","get","logout","dispatch","then","response","status","Error","statusText","log","catch","err","Header","state","isMobile","isOpen","sources","show","search","attemptLogout","props","res","history","push","Routes","Login","renderNavItems","className","to","Home","activeClassName","Topics","Projects","Profile","onClick","type","style","backgroundColor","this","Component","withRouter","connect","userFetchSuccess","user","getUser","updateUser","payload","put","fetchUser","guard","component","rest","isLoggedIn","path","Root","Object","keys","length","Input","id","label","htmlFor","radio","checkbox","LOGIN_VALIDATION_SCHEMA","yup","shape","email","required","password","initialValues","validationSchema","onSubmit","values","value","setItem","setSessionStorage","token","placeholder","SignUp","formatDate","date","format","moment","Dropdown","options","as","map","item","i","DatePickerField","setFieldValue","useFormikContext","useField","field","selected","Date","onChange","val","companies","rememberMe","firstName","lastName","birthDate","sex","avatarUrl","jsExperience","reactExperience","companyId","SIGNUP_VALIDATION_SCHEMA","min","oneOf","onRememberMeChange","setState","attemptSignUp","Number","getCompaniesFromServer","formik","handleSubmit","checked","aria-label","getTopics","topics","addTopic","topic","voteTopic","endpoints","deleteTopic","delete","topicDeleteSuccess","TOPIC_VALIDATION_SCHEMA","attemptAdd","votedByMe","canDelete","USER_VALIDATION_SCHEMA","attemptUpdate","editUser","validateOnMount","getProjects","projects","voteProject","freeze","NotFoundPage","NotFound","location","pathname","Router","exact","App","Boolean","window","hostname","match","initialState","project","combineReducers","action","store","enhancer","applyMiddleware","thunk","createStore","reducers","configureStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8cc6fde4.chunk.js","sourcesContent":["import styled from 'styled-components';\r\n\r\nexport const PageContainer = styled.div`\r\n    margin-top: 60px;\r\n    padding: 10px 40px;\r\n`;\r\n","/* eslint-disable no-console */\r\nexport const log = text => console.log(text);\r\n\r\nexport const info = text => console.info(text);\r\n\r\nexport const warn = text => console.warn(text);\r\n\r\nexport const error = text => console.error(text);\r\n","import { warn } from './logger';\r\nlet memoryStorage = {};\r\n\r\nexport const setSessionStorage = (key, value) => {\r\n    try {\r\n        memoryStorage[key] = value;\r\n        sessionStorage.setItem(key, value);\r\n    } catch (e) {\r\n        warn(`Error on setting sessionStorage by ${key} key!`);\r\n    }\r\n};\r\n\r\nexport const getSessionStorage = (key) => {\r\n    try {\r\n        return sessionStorage.getItem(key);\r\n    } catch (e) {\r\n        warn(`Error on getting sessionStorage by name ${key} (${e})`);\r\n        return memoryStorage[key] || null;\r\n    }\r\n\r\n};\r\n\r\nexport const removeSessionStorage = (name) => {\r\n    try {\r\n        delete memoryStorage[name];\r\n        sessionStorage.removeItem(name);\r\n    } catch (error) {\r\n        warn(`Error on removing sessionStorage by ${name} key!`);\r\n    }\r\n};\r\n\r\nexport const clearSessionStorage = () => {\r\n    try {\r\n        memoryStorage = {};\r\n        sessionStorage.clear();\r\n    } catch (e) {\r\n        warn(`Error on clearing sessionStorage!`);\r\n    }\r\n};\r\n","import { NotificationManager } from \"react-notifications\";\r\n\r\nexport const notifyInfo = (message, title, time, cb) => NotificationManager.info(message, title, time, cb);\r\nexport const notifySuccess = (message, title, time, cb) => NotificationManager.success(message, title, time, cb);\r\nexport const notifyWarning = (message, title, time, cb) => NotificationManager.warning(message, title, time, cb);\r\nexport const notifyError = (message, title, time, cb) => NotificationManager.error(message, title, time, cb);\r\n","// import axios as http from 'axios';\r\n//\r\n// export const CancelToken = axios.CancelToken;\r\n// export const isCancel = axios.isCancel;\r\nimport { getSessionStorage } from \"../utils/storage\";\r\nimport {Routes} from \"../Router\";\r\nimport { notifyError } from \"./notify\";\r\n\r\nconst axios = require('axios').create({\r\n    baseURL: process.env.REACT_APP_API_URL\r\n});\r\n\r\naxios.interceptors.request.use(config => {\r\n    let accessToken = getSessionStorage('token');\r\n    if (accessToken) {\r\n        config.headers['token'] = accessToken\r\n    }\r\n\r\n    return config;\r\n});\r\n\r\n// axios.interceptors.response.use(res => res, e => {\r\n//     if (!e.response || !e.response.status)\r\n//     return Promise.reject(e);\r\n//\r\n//     switch (e.response.status) {\r\n//         case 401:\r\n//             history.push('/topics');\r\n//             // window.location.href = `${process.env.REACT_APP_BASE_HREF}/login`;\r\n//             break\r\n//     }\r\n//\r\n//     return Promise.reject(e)\r\n// });\r\n\r\nexport const setupInterceptors = (history) => {\r\n    axios.interceptors.response.use(res => res, e => {\r\n\r\n        if (!e.response || !e.response.status)\r\n            return Promise.reject(e);\r\n\r\n        switch (e.response.status) {\r\n            case 401:\r\n                history.push(Routes.Login);\r\n                notifyError('Session expired');\r\n                break;\r\n            default: notifyError(e.response.data);\r\n        }\r\n\r\n        return Promise.reject(e)\r\n    });\r\n};\r\n\r\nexport default axios;\r\n","import axios from \"../plugins/axios\";\r\n\r\nexport const login = (data) => axios.post('users/login', data);\r\nexport const register = (data) => axios.post('users/register', data);\r\nexport const logout = () => axios.get('users/logout');\r\n\r\nexport const getCompanies = () => axios.get('companies');\r\n\r\nexport const getUser = () => axios.get('users');\r\nexport const updateUser = (data) => axios.put('users/update', data);\r\n\r\nexport const getTopics = () => axios.get('topics');\r\nexport const addTopic = (data) => axios.post('topics', data);\r\nexport const voteTopic = (id, data) => axios.post(`topics/${id}/voting`, data);\r\nexport const deleteTopic = (id) => axios.delete(`topics/${id}`);\r\n\r\n\r\nexport const getProjects = () => axios.get('projects');\r\n// /projects/:id/voting\r\n\r\nexport const voteProject = (id, data) => axios.post(`projects/${id}/voting`, data);\r\n\r\n","import * as endpoints from \"../utils/endpoints\";\r\nimport { notifySuccess } from \"../plugins/notify\";\r\n\r\nexport function userFetchSuccess (user) {\r\n    return {\r\n        type: 'USER_FETCH_SUCCESS',\r\n        user\r\n    }\r\n\r\n}\r\n\r\nexport function logout() {\r\n    return (dispatch) => {\r\n        return endpoints.logout()\r\n            .then((response) => {\r\n                if (response.status !== 200) {\r\n                    throw Error(response.statusText);\r\n                }\r\n\r\n                notifySuccess('Logout success');\r\n                console.log('response users', response);\r\n                return response;\r\n            })\r\n        .catch((err) => console.log(err));\r\n    };\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { NavLink, withRouter } from \"react-router-dom\";\r\nimport { connect } from \"react-redux\";\r\nimport { logout } from \"../actions/auth\";\r\nimport { Routes } from \"../Router\";\r\nimport { removeSessionStorage } from \"../utils/storage\"\r\n\r\nclass Header extends Component {\r\n    state = {\r\n        isMobile: null,\r\n        isOpen: false,\r\n        sources: [],\r\n        show: false,\r\n        search: ''\r\n    };\r\n\r\n    attemptLogout = () => {\r\n        this.props.logout()\r\n            .then(res => {\r\n                if (res) {\r\n                    removeSessionStorage('token');\r\n                    this.props.history.push(Routes.Login)\r\n                }\r\n            })\r\n    };\r\n\r\n    renderNavItems = () => {\r\n        return (\r\n            <>\r\n                <ul className=\"nav\">\r\n                    <li className=\"nav-item\">\r\n                        <NavLink\r\n                            to={Routes.Home}\r\n                            className=\"nav-link\"\r\n                            activeClassName='active'>Home</NavLink>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <NavLink\r\n                            to={Routes.Topics}\r\n                            className=\"nav-link\"\r\n                            activeClassName='active'>Topics</NavLink>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <NavLink\r\n                            to={Routes.Projects}\r\n                            className=\"nav-link\"\r\n                            activeClassName='active'>Projects</NavLink>\r\n                    </li>\r\n                    <li className=\"nav-item\">\r\n                        <NavLink\r\n                            to={Routes.Profile}\r\n                            className=\"nav-link\"\r\n                            activeClassName='active'>Profile</NavLink>\r\n                    </li>\r\n                </ul>\r\n                <button onClick={this.attemptLogout} type=\"button\" className=\"btn btn-info\">Logout</button>\r\n            </>\r\n        )\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"fixed-top\">\r\n                <nav className=\"navbar navbar-light\" style={{ backgroundColor: \"#e3f2fd\" }}>\r\n                    { this.renderNavItems() }\r\n                </nav>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n     logout: () => dispatch(logout())\r\n    }\r\n);\r\n\r\nexport default withRouter(connect(null, mapDispatchToProps)(Header));\r\n","import * as endpoints from \"../utils/endpoints\";\r\nimport { notifySuccess } from \"../plugins/notify\";\r\n\r\nexport function userFetchSuccess (user) {\r\n    return {\r\n        type: 'USER_FETCH_SUCCESS',\r\n        user\r\n    }\r\n\r\n}\r\n\r\nexport function getUser() {\r\n    return (dispatch) => {\r\n        // dispatch(itemsAreLoading(true));\r\n\r\n        return endpoints.getUser()\r\n            .then((response) => {\r\n                if (response.status !== 200) {\r\n                    throw Error(response.statusText);\r\n                }\r\n\r\n                // dispatch(itemsAreLoading(false));\r\n                console.log('response users', response);\r\n                return response;\r\n            })\r\n            .then((response) => dispatch(userFetchSuccess(response.data)))\r\n            // .catch(() => dispatch(itemsHaveError(true)));\r\n    };\r\n}\r\n\r\nexport function updateUser(payload) {\r\n    return (dispatch) => {\r\n        // dispatch(itemsAreLoading(true));\r\n\r\n        endpoints.updateUser(payload)\r\n            .then((response) => {\r\n                if (response.status !== 200) {\r\n                    throw Error(response.statusText);\r\n                }\r\n\r\n                // dispatch(itemsAreLoading(false));\r\n                notifySuccess('User updated successfully');\r\n                return response;\r\n            })\r\n            .then((response) => dispatch(userFetchSuccess(response.data)))\r\n        // .catch(() => dispatch(itemsHaveError(true)));\r\n    };\r\n}\r\n","import React from \"react\";\r\nimport {\r\n    Route as ReactRoute,\r\n    Redirect\r\n} from \"react-router-dom\";\r\nimport { getSessionStorage } from \"../utils/storage\";\r\nimport { Routes } from \"../Router\";\r\nimport {setupInterceptors} from \"../plugins/axios\";\r\nimport { withRouter } from \"react-router-dom\";\r\nimport Header from \"./Header\";\r\nimport { getUser } from \"../actions/user\";\r\nimport {connect} from \"react-redux\";\r\n\r\n\r\nconst Route = ({ guard, component: Component, fetchUser, user, ...rest}) => {\r\n    let isLoggedIn = !!getSessionStorage('token');\r\n    // setupInterceptors(rest.history);\r\n\r\n    if (guard) {\r\n        if (isLoggedIn) {\r\n            if (rest.path === Routes.Root) {\r\n                return <Redirect to={Routes.Home}/>\r\n            }\r\n\r\n            if (!Object.keys(user).length) {\r\n                fetchUser()\r\n                    // .then(res => {\r\n                    //     console.log('thennnnnn', res);\r\n                    //     return (\r\n                    //         <>\r\n                    //             <Header />\r\n                    //             <ReactRoute {...rest} component={Component} />\r\n                    //         </>\r\n                    //     );\r\n                    // })\r\n            } else {\r\n                // return null\r\n            }\r\n\r\n            return (\r\n                <>\r\n                    <Header />\r\n                    <ReactRoute {...rest} component={Component} />\r\n                </>\r\n            );\r\n        }\r\n        return <Redirect to={Routes.Login} />\r\n    } else if (isLoggedIn) {\r\n        return <Redirect to={Routes.Home} />;\r\n    }\r\n\r\n    return <ReactRoute component={Component} {...rest} />\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        user: state.user\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchUser: () => dispatch(getUser())\r\n    };\r\n};\r\n\r\nexport default withRouter(connect(mapStateToProps, mapDispatchToProps)(Route));\r\n","import React, { Component } from \"react\";\r\n\r\nclass Home extends Component{\r\n    render() {\r\n        return (\r\n            <div>Home</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home;\r\n\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\"\r\nimport { Field, ErrorMessage } from \"formik\";\r\n\r\nconst Input = ({\r\n                   id,\r\n                   name,\r\n                   className,\r\n                   label,\r\n                   ...rest\r\n               }) => {\r\n\r\n    const classes = () => {\r\n        return (\r\n            {\r\n                radio: 'form-check-input',\r\n                checkbox: 'form-check-input'\r\n            }[rest.type] || 'form-control'\r\n        )\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <label htmlFor={rest.type === 'radio' ? id : name}>{label}</label>\r\n            <Field name={name}\r\n                   className={classes()}\r\n                   id={id}\r\n                   {...rest} />\r\n            <ErrorMessage component=\"div\"\r\n                          name={name}\r\n                          className=\"text-error\"/>\r\n        </>\r\n    )\r\n};\r\n\r\nInput.propTypes = {\r\n    placeholder: PropTypes.string,\r\n    name: PropTypes.string.isRequired,\r\n    id: PropTypes.string,\r\n    value: PropTypes.any,\r\n    type: PropTypes.string,\r\n    className: PropTypes.string,\r\n    rows: PropTypes.number\r\n};\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\nimport Input from \"../components/Input\";\r\nimport { Link } from \"react-router-dom\";\r\nimport { Routes } from \"../Router\";\r\nimport { login } from \"../utils/endpoints\";\r\nimport { setSessionStorage } from \"../utils/storage\";\r\nimport {Formik, Form } from 'formik';\r\nimport * as yup from 'yup';\r\n\r\nconst Login = ({ history }) => {\r\n    const initialValues = {\r\n        email: '',\r\n        password: ''\r\n    };\r\n\r\n    const LOGIN_VALIDATION_SCHEMA = yup.object().shape({\r\n        email: yup.string().email('Email should be valid email').required(\"Email is required\"),\r\n        password: yup.string().required(\"Password is required\")\r\n    });\r\n\r\n    const attemptLogin = (values) => {\r\n        login(values)\r\n            .then(res => {\r\n                if (res.status === 200) {\r\n                    console.log('res reg', res.data);\r\n                    setSessionStorage('token', res.data.token);\r\n                    history.push('/home');\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    };\r\n\r\n    return (\r\n        <>\r\n            <Formik\r\n                initialValues={initialValues}\r\n                validationSchema={LOGIN_VALIDATION_SCHEMA}\r\n                onSubmit={attemptLogin}\r\n            >\r\n                <Form>\r\n                    <div className=\"form-group row justify-content-center\">\r\n                        <div className=\"col-sm-10 col-md-6\">\r\n                            <Input name=\"email\"\r\n                                   label=\"Email\"\r\n                                   placeholder=\"Enter Email\" />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"form-group row justify-content-center\">\r\n                        <div className=\"col-sm-10 col-md-6\">\r\n                            <Input name=\"password\"\r\n                                   label=\"Password\"\r\n                                   type=\"password\"\r\n                                   placeholder=\"Enter password\" />\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div className=\"form-group row justify-content-center\">\r\n                        <div className=\"col-sm-10 col-md-6\">\r\n                            <button type=\"submit\"\r\n                                    className=\"btn btn-info float-right\">Login</button>\r\n                        </div>\r\n                    </div>\r\n                </Form>\r\n            </Formik>\r\n            <div className=\"form-group row justify-content-center\">\r\n                <div className=\"col-sm-10 col-md-6 d-flex align-items-center\">\r\n                    <div>Don't have account, go to</div>\r\n                    <Link to={Routes.SignUp}>\r\n                        <button className=\"btn btn-link float-right\">Register</button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        </>\r\n    )\r\n};\r\n\r\nexport default Login\r\n","import moment from \"moment\";\r\n\r\nexport const formatDate = (date, format = 'YYYY-MM-DD') => {\r\n    return moment(date).format(format)\r\n};\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\"\r\nimport { Field, ErrorMessage } from \"formik\";\r\n\r\nconst Dropdown = ({\r\n                   name,\r\n                   className,\r\n                   label,\r\n                   options,\r\n                   ...rest\r\n               }) => {\r\n    return (\r\n        <>\r\n            <label htmlFor={name}>{label}</label>\r\n            <Field\r\n                as=\"select\"\r\n                name={name}\r\n                className={className || \"form-control\"}\r\n                {...rest}>\r\n                <option value=\"\">Default select</option>\r\n                {\r\n                    options.map((item, i) => (\r\n                        <option value={item.id}\r\n                                key={item.id + i}>{item.name}</option>\r\n                    ))\r\n                }\r\n            </Field>\r\n            <ErrorMessage component=\"div\"\r\n                          name={name}\r\n                          className=\"text-error\"/>\r\n        </>\r\n    )\r\n};\r\n\r\nDropdown.propTypes = {\r\n    options: PropTypes.array.isRequired,\r\n    placeholder: PropTypes.string,\r\n    name: PropTypes.string.isRequired,\r\n    className: PropTypes.string,\r\n};\r\n\r\nexport default Dropdown;\r\n","import React from \"react\";\r\nimport { useField, useFormikContext, ErrorMessage } from \"formik\";\r\nimport DatePicker from 'react-date-picker';\r\n\r\nconst DatePickerField = ({ ...props }) => {\r\n    const { setFieldValue } = useFormikContext();\r\n    const [field] = useField(props);\r\n    return (\r\n        <div className=\"d-flex flex-column\">\r\n            <label htmlFor={props.name}>{props.label}</label>\r\n            <DatePicker\r\n                {...field}\r\n                {...props}\r\n                selected={(field.value && new Date(field.value)) || ''}\r\n                onChange={val => {\r\n                    setFieldValue(field.name, val);\r\n                }}\r\n            />\r\n            <ErrorMessage component=\"div\"\r\n                          name={props.name}\r\n                          className=\"text-error\"/>\r\n         </div>\r\n    );\r\n};\r\n\r\nexport default DatePickerField\r\n","import React, { Component } from \"react\";\r\nimport { formatDate } from \"../utils/helpers\";\r\nimport Input from \"../components/Input\";\r\nimport Dropdown from \"../components/Dropdown\"\r\nimport DatePickerField from \"../components/DatePickerField\";\r\nimport { getCompanies, register } from \"../utils/endpoints\";\r\nimport { Formik, Form } from 'formik';\r\nimport * as yup from 'yup';\r\nimport {Link} from \"react-router-dom\";\r\nimport {Routes} from \"../Router\";\r\nimport { notifySuccess } from \"../plugins/notify\";\r\n\r\nclass SignUp extends Component {\r\n    state = {\r\n        companies: [],\r\n        rememberMe: false\r\n    };\r\n\r\n    initialValues = {\r\n        email: '',\r\n        password: '',\r\n        firstName: '',\r\n        lastName: '',\r\n        birthDate: new Date(),\r\n        sex: 'male',\r\n        avatarUrl: 'https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_960_720.png',\r\n        jsExperience: 0,\r\n        reactExperience: 0,\r\n        companyId: ''\r\n    };\r\n\r\n    SIGNUP_VALIDATION_SCHEMA = yup.object().shape({\r\n        firstName: yup\r\n            .string()\r\n            .required(\"First name is required\"),\r\n        lastName: yup\r\n            .string()\r\n            .required(\"Last name is required\"),\r\n        birthDate: yup\r\n            .date()\r\n            .min(new Date(1900, 0, 1))\r\n            .required(\"Birth date is required\"),\r\n        sex: yup\r\n            .mixed()\r\n            .oneOf(['male', 'female']),\r\n        avatarUrl: yup\r\n            .string()\r\n            .required(\"Avatar is required\"),\r\n        jsExperience: yup\r\n            .number()\r\n            .required(\"JS experience is required\"),\r\n        reactExperience: yup\r\n            .number()\r\n            .required(\"React experience is required\"),\r\n        companyId: yup\r\n            .number()\r\n            .required(\"Company is required\"),\r\n        email: yup\r\n            .string()\r\n            .email('Email should be valid email').required(\"Email is required\"),\r\n        password: yup\r\n            .string()\r\n            .required(\"Password is required\")\r\n    });\r\n\r\n    onRememberMeChange = ({ value }) => {\r\n        this.setState({ rememberMe: value })\r\n    };\r\n\r\n    attemptSignUp = (values) => {\r\n        const payload = {\r\n            ...values,\r\n            companyId: Number(values.companyId),\r\n            birthDate: formatDate(values.birthDate)\r\n        };\r\n\r\n        register(payload)\r\n            .then(res => {\r\n                if (res.status === 200) {\r\n                    notifySuccess('Sign up completed successfully');\r\n                    this.props.history.push('/login')\r\n                }\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.getCompaniesFromServer()\r\n    }\r\n\r\n    getCompaniesFromServer = () => {\r\n        getCompanies()\r\n            .then(res => {\r\n                this.setState({ companies: res.data })\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Formik\r\n                    initialValues={this.initialValues}\r\n                    validationSchema={this.SIGNUP_VALIDATION_SCHEMA}\r\n                    onSubmit={this.attemptSignUp}\r\n                >\r\n                    {(formik) => (\r\n                        <Form onSubmit={formik.handleSubmit}>\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <Input name=\"firstName\"\r\n                                           label=\"First name\"\r\n                                           placeholder=\"Enter first name\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <Input name=\"lastName\"\r\n                                           label=\"Last name\"\r\n                                           placeholder=\"Enter Last name\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <DatePickerField name=\"birthDate\"\r\n                                                     id=\"birthDate\"\r\n                                                     label=\"Birth date\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <div className=\"form-check d-flex\">\r\n                                        <Input id=\"male\"\r\n                                               label=\"Male\"\r\n                                               type=\"radio\"\r\n                                               value=\"male\"\r\n                                               name='sex'\r\n                                               checked={formik.values.sex=== \"male\"} />\r\n                                    </div>\r\n                                    <div className=\"form-check d-flex\">\r\n                                        <Input value=\"female\"\r\n                                               label=\"Female\"\r\n                                               type=\"radio\"\r\n                                               name=\"sex\"\r\n                                               id=\"female\"\r\n                                               checked={formik.values.sex === 'female'}/>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <Input name=\"email\"\r\n                                           label=\"Email\"\r\n                                           placeholder=\"Enter Email\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <Input name=\"password\"\r\n                                           label=\"Password\"\r\n                                           type=\"password\"\r\n                                           placeholder=\"Enter password\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <Input name=\"jsExperience\"\r\n                                           label=\"JS experience\"\r\n                                           type=\"number\"\r\n                                           placeholder=\"Enter your JS experience in month\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <Input name=\"reactExperience\"\r\n                                           label=\"React experience\"\r\n                                           type=\"number\"\r\n                                           placeholder=\"Enter your React experience in month\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <Dropdown name=\"companyId\"\r\n                                              label=\"Company\"\r\n                                              options={this.state.companies}/>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <div className=\"form-check\">\r\n                                        <input value={this.state.rememberMe}\r\n                                               onChange={this.onRememberMeChange}\r\n                                               type=\"checkbox\"\r\n                                               name=\"rememberMe\"\r\n                                               id=\"rememberMe\"\r\n                                               aria-label=\"...\" />\r\n                                        <label htmlFor=\"rememberMe\"\r\n                                               className=\"form-check-label\">Remember me</label>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <button onClick={formik.handleSubmit}\r\n                                            type=\"submit\"\r\n                                            className=\"btn btn-info float-right\">Sign up</button>\r\n                                </div>\r\n                            </div>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n                <div className=\"form-group row justify-content-center\">\r\n                    <div className=\"col-sm-10 col-md-6 d-flex align-items-center\">\r\n                        <div>Already have account, go to</div>\r\n                        <Link to={Routes.Login}>\r\n                            <button className=\"btn btn-link float-right\">Login</button>\r\n                        </Link>\r\n                    </div>\r\n                </div>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default SignUp\r\n","import * as endpoints from \"../utils/endpoints\";\r\nimport { notifySuccess } from \"../plugins/notify\";\r\n\r\nexport function topicsFetchSuccess (topics) {\r\n    return {\r\n        type: 'TOPICS_FETCH_SUCCESS',\r\n        topics\r\n    }\r\n\r\n}\r\n\r\nexport function topicAddSuccess (topic) {\r\n    return {\r\n        type: 'TOPIC_ADD_SUCCESS',\r\n        topic\r\n    }\r\n\r\n}\r\n\r\nexport function topicVoteSuccess (topic) {\r\n    return {\r\n        type: 'TOPIC_VOTED_SUCCESS',\r\n        topic\r\n    }\r\n\r\n}\r\n\r\nexport function topicDeleteSuccess (id) {\r\n    return {\r\n        type: 'TOPIC_DELETE_SUCCESS',\r\n        id\r\n    }\r\n\r\n}\r\n\r\nexport function getTopics() {\r\n    return (dispatch) => {\r\n        // dispatch(itemsAreLoading(true));\r\n\r\n        return endpoints.getTopics()\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    dispatch(topicsFetchSuccess(response.data))\r\n                }\r\n            })\r\n            .catch((err) => console.log(err));\r\n    };\r\n}\r\n\r\nexport function addTopic(payload) {\r\n    return (dispatch) => {\r\n        // dispatch(itemsAreLoading(true));\r\n\r\n        endpoints.addTopic(payload)\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    dispatch(topicAddSuccess(response.data));\r\n                    dispatch(getTopics());\r\n                    notifySuccess('Topic added successfully');\r\n                }\r\n                // dispatch(itemsAreLoading(false));\r\n            })\r\n            .catch((err) => console.log(err));\r\n    };\r\n}\r\n\r\nexport function voteTopic (id, payload) {\r\n    return (dispatch) => {\r\n        // dispatch(itemsAreLoading(true));\r\n\r\n        endpoints.voteTopic(id, payload)\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    console.log('add topic', response.data);\r\n                    dispatch(topicVoteSuccess(response.data));\r\n                    notifySuccess('Topic voted successfully');\r\n                    dispatch(getTopics());\r\n                }\r\n                // dispatch(itemsAreLoading(false));\r\n            })\r\n            .catch((err) => console.log(err));\r\n    };\r\n}\r\n\r\nexport function deleteTopic (id) {\r\n    return (dispatch) => {\r\n        // dispatch(itemsAreLoading(true));\r\n\r\n        endpoints.deleteTopic(id)\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    console.log('add topic', response.data);\r\n                    dispatch(topicDeleteSuccess(response.data));\r\n                    notifySuccess('Topic deleted successfully');\r\n                    dispatch(getTopics());\r\n                }\r\n                // dispatch(itemsAreLoading(false));\r\n            })\r\n        .catch((err) => console.log(err));\r\n    };\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getTopics, deleteTopic, voteTopic, addTopic } from \"../actions/topics\"\r\nimport Input from \"../components/Input\";\r\nimport {Form, Formik} from \"formik\";\r\nimport * as yup from \"yup\";\r\n\r\nclass Topics extends Component {\r\n    initialValues = {\r\n        title: ''\r\n    };\r\n\r\n    TOPIC_VALIDATION_SCHEMA = yup.object().shape({\r\n        title: yup\r\n            .string()\r\n            .required(\"Topic title is required\")\r\n    });\r\n\r\n    componentDidMount() {\r\n        this.props.getTopics()\r\n    }\r\n\r\n    attemptAdd = (values) => {\r\n        this.props.addTopic(values);\r\n    };\r\n\r\n    render() {\r\n        console.log('this.props.topics', this.props.topics);\r\n        const { topics } = this.props;\r\n\r\n        return (\r\n            <>\r\n                <Formik\r\n                    initialValues={this.initialValues}\r\n                    validationSchema={this.TOPIC_VALIDATION_SCHEMA}\r\n                    onSubmit={this.attemptAdd}\r\n                >\r\n                    <Form>\r\n                        <div className=\"form-group row justify-content-center\">\r\n                            <div className=\"col-sm-10 col-md-6\">\r\n                                <Input name=\"title\" type=\"text\"/>\r\n                            </div>\r\n                            <div className=\"col-sm-10 col-md-6\">\r\n                                <button type=\"submit\"\r\n                                        className=\"btn btn-info float-right mt-3\">Add</button>\r\n                            </div>\r\n                        </div>\r\n                    </Form>\r\n                </Formik>\r\n\r\n                <ul className=\"list-group\">\r\n                    {\r\n\r\n                        topics.map(item => (\r\n                            <li className=\"list-group-item\"\r\n                                key={item.id}>\r\n                                { item.title }\r\n\r\n                                <button onClick={() => this.props.voteTopic(item.id, {\r\n                                    type: item.votedByMe ? 'unlike' : 'like'\r\n                                })}\r\n                                        type=\"submit\"\r\n                                        className=\"btn btn-info float-right\">{ item.votedByMe ? 'UnVote': 'Vote'}</button>\r\n\r\n                                {\r\n                                    item.canDelete && <button onClick={() => this.props.deleteTopic(item.id)}\r\n                                                              type=\"submit\"\r\n                                                              className=\"btn btn-info float-right\">Delete</button>\r\n                                }\r\n                            </li>\r\n                        ))\r\n                    }\r\n                </ul>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    topics: state.topics.topics\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getTopics: () => dispatch(getTopics()),\r\n    deleteTopic: (id) => dispatch(deleteTopic(id)),\r\n    voteTopic: (id, payload) => dispatch(voteTopic(id, payload)),\r\n    addTopic: (payload) => dispatch(addTopic(payload))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Topics)\r\n","import React, { Component } from \"react\";\r\nimport { formatDate } from \"../utils/helpers\";\r\nimport Input from \"../components/Input\";\r\nimport Dropdown from \"../components/Dropdown\"\r\nimport DatePickerField from \"../components/DatePickerField\";\r\nimport { getCompanies } from \"../utils/endpoints\";\r\nimport { Formik, Form } from 'formik';\r\nimport * as yup from 'yup';\r\nimport UserForm from \"../components/UserForm\";\r\nimport { connect } from \"react-redux\";\r\nimport { updateUser } from \"../actions/user\";\r\n\r\nclass Profile extends Component {\r\n    state = {\r\n        companies: []\r\n    };\r\n\r\n    initialValues = {\r\n        email: '',\r\n        firstName: 'Lil',\r\n        lastName: 'Kh',\r\n        birthDate: new Date(),\r\n        sex: 'male',\r\n        avatarUrl: 'https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_960_720.png',\r\n        jsExperience: 0,\r\n        reactExperience: 0,\r\n        companyId: ''\r\n    };\r\n\r\n    USER_VALIDATION_SCHEMA = yup.object().shape({\r\n        firstName: yup\r\n            .string()\r\n            .required(\"First name is required\"),\r\n        lastName: yup\r\n            .string()\r\n            .required(\"Last name is required\"),\r\n        birthDate: yup\r\n            .date()\r\n            .min(new Date(1900, 0, 1))\r\n            .required(\"Birth date is required\"),\r\n        sex: yup\r\n            .mixed()\r\n            .oneOf(['male', 'female']),\r\n        avatarUrl: yup\r\n            .string()\r\n            .required(\"Avatar is required\"),\r\n        jsExperience: yup\r\n            .number()\r\n            .required(\"JS experience is required\"),\r\n        reactExperience: yup\r\n            .number()\r\n            .required(\"React experience is required\"),\r\n        companyId: yup\r\n            .number()\r\n            .required(\"Company is required\"),\r\n        email: yup\r\n            .string()\r\n            .email('Email should be valid email').required(\"Email is required\")\r\n    });\r\n\r\n    attemptUpdate = (values) => {\r\n        const payload = {\r\n            ...values,\r\n            companyId: Number(values.companyId),\r\n            birthDate: formatDate(values.birthDate)\r\n        };\r\n\r\n        this.props.editUser(payload)\r\n    };\r\n\r\n    componentDidMount() {\r\n        this.getCompaniesFromServer()\r\n    }\r\n\r\n    getCompaniesFromServer = () => {\r\n        getCompanies()\r\n            .then(res => {\r\n                this.setState({ companies: res.data })\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    };\r\n\r\n    render() {\r\n        let { user } = this.props;\r\n\r\n        if (!Object.keys(user).length) {\r\n            return (<div>Lodaing...</div>)\r\n        }\r\n\r\n        user = {...user, birthDate: new Date(user.birthDate) };\r\n\r\n        return (\r\n            <>\r\n              {/*<UserForm attemptSubmit={this.attemptUpdate}*/}\r\n              {/*          users={ {...this.props.users, birthDate: new Date(this.props.users.birthDate) }}*/}\r\n              {/*          submitText=\"Update\" />*/}\r\n                <Formik\r\n                    initialValues={user}\r\n                    validateOnMount={false}\r\n                    validationSchema={this.USER_VALIDATION_SCHEMA}\r\n                    onSubmit={this.attemptUpdate}\r\n                >\r\n                    {(formik) => (\r\n                        <Form onSubmit={formik.handleSubmit}>\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <Input name=\"firstName\"\r\n                                           label=\"First name\"\r\n                                           placeholder=\"Enter first name\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <Input name=\"lastName\"\r\n                                           label=\"Last name\"\r\n                                           placeholder=\"Enter Last name\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <DatePickerField name=\"birthDate\"\r\n                                                     id=\"birthDate\"\r\n                                                     label=\"Birth date\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <div className=\"form-check d-flex\">\r\n                                        <Input id=\"male\"\r\n                                               label=\"Male\"\r\n                                               type=\"radio\"\r\n                                               value=\"male\"\r\n                                               name='sex'\r\n                                               checked={formik.values.sex === 'male'} />\r\n                                    </div>\r\n                                    <div className=\"form-check d-flex\">\r\n                                        <Input value=\"female\"\r\n                                               label=\"Female\"\r\n                                               type=\"radio\"\r\n                                               name=\"sex\"\r\n                                               id=\"female\"\r\n                                               checked={formik.values.sex === 'female'}/>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <Input name=\"email\"\r\n                                           label=\"Email\"\r\n                                           placeholder=\"Enter Email\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <Input name=\"jsExperience\"\r\n                                           label=\"JS experience\"\r\n                                           type=\"number\"\r\n                                           placeholder=\"Enter your JS experience in month\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <Input name=\"reactExperience\"\r\n                                           label=\"React experience\"\r\n                                           type=\"number\"\r\n                                           placeholder=\"Enter your React experience in month\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <Dropdown name=\"companyId\"\r\n                                              label=\"Company\"\r\n                                              options={this.state.companies}/>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <button onClick={formik.handleSubmit}\r\n                                            type=\"submit\"\r\n                                            className=\"btn btn-info float-right\">Update</button>\r\n                                </div>\r\n                            </div>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({ user: state.user });\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        editUser: (payload) => dispatch(updateUser(payload))\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Profile)\r\n","import React, { Component } from \"react\";\r\nimport { formatDate } from \"../utils/helpers\";\r\nimport Input from \"../components/Input\";\r\nimport Dropdown from \"../components/Dropdown\"\r\nimport DatePickerField from \"../components/DatePickerField\";\r\nimport { getCompanies } from \"../utils/endpoints\";\r\nimport { Formik, Form } from 'formik';\r\nimport * as yup from 'yup';\r\n\r\nclass UserForm extends Component {\r\n    state = {\r\n        companies: [],\r\n        rememberMe: false\r\n    };\r\n\r\n    initialValues = {\r\n        email: '',\r\n        password: '',\r\n        firstName: 'Lil',\r\n        lastName: 'Kh',\r\n        birthDate: new Date(),\r\n        sex: 'male',\r\n        avatarUrl: 'https://cdn.pixabay.com/photo/2016/08/08/09/17/avatar-1577909_960_720.png',\r\n        jsExperience: 0,\r\n        reactExperience: 0,\r\n        companyId: ''\r\n    };\r\n\r\n    USER_VALIDATION_SCHEMA = yup.object().shape({\r\n        fistName: yup\r\n            .string()\r\n            .required(\"First name is required\"),\r\n        lastName: yup\r\n            .string()\r\n            .required(\"Last name is required\"),\r\n        birthDate: yup\r\n            .date()\r\n            .min(new Date(1900, 0, 1))\r\n            .required(\"Birth date is required\"),\r\n        sex: yup\r\n            .mixed()\r\n            .oneOf(['male', 'female']),\r\n        avatarUrl: yup\r\n            .string()\r\n            .required(\"Avatar is required\"),\r\n        jsExperience: yup\r\n            .number()\r\n            .required(\"JS experience is required\"),\r\n        reactExperience: yup\r\n            .number()\r\n            .required(\"React experience is required\"),\r\n        companyId: yup\r\n            .number()\r\n            .required(\"Company is required\"),\r\n        email: yup\r\n            .string()\r\n            .email('Email should be valid email').required(\"Email is required\"),\r\n        // password: this.props.isCreate ? yup\r\n        //     .string()\r\n        //     .required(\"Password is required\") : yup\r\n        //     .string(),\r\n    });\r\n\r\n    componentDidMount() {\r\n        this.getCompaniesFromServer()\r\n    }\r\n\r\n    getCompaniesFromServer = () => {\r\n        getCompanies()\r\n            .then(res => {\r\n                console.log('res', res);\r\n                this.setState({ companies: res.data })\r\n            })\r\n            .catch(err => {\r\n                console.log(err)\r\n            })\r\n    };\r\n\r\n    onSubmit = (values) => {\r\n        const payload = {\r\n            ...values,\r\n            companyId: Number(values.companyId),\r\n            birthDate: formatDate(values.birthDate)\r\n        };\r\n        console.log('aaaaaa');\r\n        this.props.attemptSubmit(payload)\r\n    };\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                <Formik\r\n                    initialValues={this.props.user || this.initialValues}\r\n                    validationSchema={this.USER_VALIDATION_SCHEMA}\r\n                    onSubmit={this.onSubmit}\r\n                >\r\n                    {(formik) => (\r\n                        <Form onSubmit={formik.handleSubmit}>\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <Input name=\"firstName\"\r\n                                           label=\"First name\"\r\n                                           placeholder=\"Enter first name\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <Input name=\"lastName\"\r\n                                           label=\"Last name\"\r\n                                           placeholder=\"Enter Last name\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <DatePickerField name=\"birthDate\"\r\n                                                     id=\"birthDate\"\r\n                                                     label=\"Birth date\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <div className=\"form-check d-flex\">\r\n                                        <Input id=\"male\"\r\n                                               label=\"Male\"\r\n                                               type=\"radio\"\r\n                                               value=\"male\"\r\n                                               name='sex'\r\n                                               checked={formik.values.sex === 'male'} />\r\n                                    </div>\r\n                                    <div className=\"form-check d-flex\">\r\n                                        <Input value=\"female\"\r\n                                               label=\"Female\"\r\n                                               type=\"radio\"\r\n                                               name=\"sex\"\r\n                                               id=\"female\"\r\n                                               checked={formik.values.sex === 'female'}/>\r\n                                    </div>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <Input name=\"email\"\r\n                                           label=\"Email\"\r\n                                           placeholder=\"Enter Email\" />\r\n                                </div>\r\n                            </div>\r\n\r\n                            {this.props.isCreate &&\r\n                                <div className=\"form-group row justify-content-center\">\r\n                                    <div className=\"col-sm-10 col-md-6\">\r\n                                        <Input name=\"password\"\r\n                                               label=\"Password\"\r\n                                               type=\"password\"\r\n                                               placeholder=\"Enter password\" />\r\n                                    </div>\r\n                                </div>\r\n                            }\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <Dropdown name=\"companyId\"\r\n                                              label=\"Company\"\r\n                                              options={this.state.companies}/>\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"form-group row justify-content-center\">\r\n                                <div className=\"col-sm-10 col-md-6\">\r\n                                    <button onClick={formik.handleSubmit}\r\n                                            type=\"submit\"\r\n                                            className=\"btn btn-info float-right\">{this.props.submitText}</button>\r\n                                </div>\r\n                            </div>\r\n                        </Form>\r\n                    )}\r\n                </Formik>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nexport default UserForm\r\n","import * as endpoints from \"../utils/endpoints\";\r\nimport { notifySuccess } from \"../plugins/notify\";\r\n\r\nexport function projectsFetchSuccess (projects) {\r\n    return {\r\n        type: 'PROJECTS_FETCH_SUCCESS',\r\n        projects\r\n    }\r\n\r\n}\r\n\r\nexport function projectsVoteSuccess (data) {\r\n    return {\r\n        type: 'PROJECT_VOTED_SUCCESS',\r\n        data\r\n    }\r\n\r\n}\r\n\r\nexport function getProjects() {\r\n    return (dispatch) => {\r\n        // dispatch(itemsAreLoading(true));\r\n\r\n        return endpoints.getProjects()\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    console.log('response.data', response.data);\r\n                    dispatch(projectsFetchSuccess(response.data))\r\n                }\r\n            })\r\n        // .catch(() => dispatch(itemsHaveError(true)));\r\n    };\r\n}\r\n\r\nexport function voteProject (id, payload) {\r\n    return (dispatch) => {\r\n        // dispatch(itemsAreLoading(true));\r\n\r\n        endpoints.voteProject(id, payload)\r\n            .then((response) => {\r\n                if (response.status === 200) {\r\n                    console.log('add topic', response.data);\r\n                    dispatch(projectsVoteSuccess(response.data));\r\n                    dispatch(getProjects())\r\n                    notifySuccess('Topic added successfully');\r\n                }\r\n                // dispatch(itemsAreLoading(false));\r\n            })\r\n        // .catch(() => dispatch(itemsHaveError(true)));\r\n    };\r\n}\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { getProjects, voteProject } from \"../actions/projects\"\r\n\r\nclass Projects extends Component {\r\n    componentDidMount() {\r\n        this.props.getProjects()\r\n    }\r\n\r\n    render() {\r\n        console.log('this.props.topics', this.props.topics);\r\n        const { projects } = this.props;\r\n        console.log('projects', projects);\r\n\r\n        return (\r\n            <>\r\n                <ul className=\"list-group\">\r\n                    {\r\n\r\n                        projects.map(item => (\r\n                            <li className=\"list-group-item\"\r\n                                key={item.id}>\r\n                                { item.title }\r\n\r\n                                <button onClick={() => this.props.voteProject(item.id, {\r\n                                    type: item.votedByMe ? 'unlike' : 'like'\r\n                                })}\r\n                                        type=\"submit\"\r\n                                        className=\"btn btn-info float-right\">{ item.votedByMe ? 'UnVote': 'Vote'}</button>\r\n                            </li>\r\n                        ))\r\n                    }\r\n                </ul>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n    projects: state.projects.projects\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n    getProjects: () => dispatch(getProjects()),\r\n    voteProject: (id, payload) => dispatch(voteProject(id, payload))\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Projects)\r\n","import React from \"react\";\r\nimport { BrowserRouter as ReactRouter, Switch } from \"react-router-dom\";\r\nimport Route from \"./components/Route\";\r\nimport { Home, Login, SignUp, Topics, Profile, Projects } from \"./pages\";\r\n\r\nexport const Routes = Object.freeze({\r\n    Root: process.env.PUBLIC_URL + '/',\r\n    Home: '/home',\r\n    Profile: '/profile',\r\n    Projects: '/projects',\r\n    Topics: '/topics',\r\n    Login: '/login',\r\n    SignUp: '/sign-up',\r\n    NotFoundPage: '*'\r\n});\r\n\r\nconst NotFound = ({ location }) => (\r\n    <div>\r\n        <strong>Error!</strong> No route found matching:\r\n        <div>\r\n            <code>{location.pathname}</code>\r\n        </div>\r\n    </div>\r\n);\r\n\r\nfunction Router() {\r\n    return (\r\n        <ReactRouter>\r\n            <Switch>\r\n                <Route path={Routes.Login} component={Login} />\r\n                <Route path={Routes.SignUp} component={SignUp} />\r\n                <Route guard path={Routes.Home} component={Home} />\r\n                <Route guard path={Routes.Topics} component={Topics} />\r\n                <Route guard path={Routes.Profile} component={Profile} />\r\n                <Route guard path={Routes.Projects} component={Projects} />\r\n\r\n                <Route exact guard path={Routes.Root} component={Home} />\r\n\r\n                <Route path={Routes.NotFoundPage} component={NotFound}/>\r\n            </Switch>\r\n        </ReactRouter>\r\n    );\r\n}\r\n\r\nexport default Router;\r\n","import React from 'react';\nimport './App.scss';\nimport { PageContainer } from \"./assets/styles/App.stype\";\nimport Router from \"./Router\";\nimport {NotificationContainer} from \"react-notifications\";\n\nfunction App() {\n  return (\n      <PageContainer>\n          <Router />\n          <NotificationContainer/>\n      </PageContainer>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const initialState = {\r\n    topics: [],\r\n    topic: {}\r\n};\r\n\r\nexport function topics (state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'TOPICS_FETCH_SUCCESS':\r\n            return {\r\n                ...state,\r\n                topics: action.topics\r\n            };\r\n        case 'TOPIC_ADD_SUCCESS':\r\n            return {\r\n                ...state,\r\n                topic: action.topic\r\n            };\r\n        case 'TOPIC_VOTED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                topic: action.topic\r\n            };\r\n        case 'TOPIC_DELETE_SUCCESS':\r\n            return {\r\n                ...state,\r\n                id: action.id\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n","const initialState = {\r\n    projects: [],\r\n    project: {}\r\n};\r\n\r\nexport function projects (state = initialState, action) {\r\n    switch (action.type) {\r\n        case 'PROJECTS_FETCH_SUCCESS':\r\n            return {\r\n                ...state,\r\n                projects: action.projects\r\n            };\r\n        case 'PRODUCTS_VOTED_SUCCESS':\r\n            return {\r\n                ...state,\r\n                project: action.project\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n","import { combineReducers } from 'redux';\r\nimport { users } from \"./users\";\r\nimport { topics } from \"./topics\";\r\nimport { projects } from \"./projects\";\r\n\r\nexport default combineReducers({\r\n    user: users,\r\n    topics,\r\n    projects\r\n});\r\n","export function users(state = {}, action) {\r\n    switch (action.type) {\r\n        case 'USER_FETCH_SUCCESS':\r\n            return action.user;\r\n        default:\r\n            return state;\r\n    }\r\n\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './assets/styles/custom.scss'\nimport { Provider } from 'react-redux'\nimport configureStore from \"./store/configureStore\";\nimport 'react-notifications/lib/notifications.css';\n\nconst store = configureStore();\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import { createStore, applyMiddleware } from \"redux\";\r\nimport thunk from \"redux-thunk\";\r\nimport reducers from \"../reducers\"\r\n\r\nexport default function configureStore (initialState = {}) {\r\n    const enhancer = applyMiddleware(thunk);\r\n\r\n    return createStore(\r\n        reducers,\r\n        initialState,\r\n        enhancer\r\n    )\r\n}\r\n"],"sourceRoot":""}